/*
 * generated by Xtext
 */
package no.hal.pg.quiz.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XQuizGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QuizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quiz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuizAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuizKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameQNameParserRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Assignment cTitleAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cTitleAssignment_2_0_1.eContents().get(0);
		private final Assignment cPartsAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cPartsAbstractQuizPartParserRuleCall_2_0_2_0 = (RuleCall)cPartsAssignment_2_0_2.eContents().get(0);
		private final Assignment cPartsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cPartsAnonymousQuizPartParserRuleCall_2_1_0 = (RuleCall)cPartsAssignment_2_1.eContents().get(0);
		
		//Quiz:
		//	{Quiz} "quiz" (name=QName? title=STRING? parts+=AbstractQuizPart* | parts+=AnonymousQuizPart);
		@Override public ParserRule getRule() { return rule; }

		//{Quiz} "quiz" (name=QName? title=STRING? parts+=AbstractQuizPart* | parts+=AnonymousQuizPart)
		public Group getGroup() { return cGroup; }

		//{Quiz}
		public Action getQuizAction_0() { return cQuizAction_0; }

		//"quiz"
		public Keyword getQuizKeyword_1() { return cQuizKeyword_1; }

		//name=QName? title=STRING? parts+=AbstractQuizPart* | parts+=AnonymousQuizPart
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=QName? title=STRING? parts+=AbstractQuizPart*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//name=QName?
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }

		//QName
		public RuleCall getNameQNameParserRuleCall_2_0_0_0() { return cNameQNameParserRuleCall_2_0_0_0; }

		//title=STRING?
		public Assignment getTitleAssignment_2_0_1() { return cTitleAssignment_2_0_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0_1_0() { return cTitleSTRINGTerminalRuleCall_2_0_1_0; }

		//parts+=AbstractQuizPart*
		public Assignment getPartsAssignment_2_0_2() { return cPartsAssignment_2_0_2; }

		//AbstractQuizPart
		public RuleCall getPartsAbstractQuizPartParserRuleCall_2_0_2_0() { return cPartsAbstractQuizPartParserRuleCall_2_0_2_0; }

		//parts+=AnonymousQuizPart
		public Assignment getPartsAssignment_2_1() { return cPartsAssignment_2_1; }

		//AnonymousQuizPart
		public RuleCall getPartsAnonymousQuizPartParserRuleCall_2_1_0() { return cPartsAnonymousQuizPartParserRuleCall_2_1_0; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AbstractQuizPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractQuizPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuizPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuizPartRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractQuizPart:
		//	QuizPart | QuizPartRef;
		@Override public ParserRule getRule() { return rule; }

		//QuizPart | QuizPartRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//QuizPart
		public RuleCall getQuizPartParserRuleCall_0() { return cQuizPartParserRuleCall_0; }

		//QuizPartRef
		public RuleCall getQuizPartRefParserRuleCall_1() { return cQuizPartRefParserRuleCall_1; }
	}

	public class QuizPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuizPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsAbstractQAParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		
		//QuizPart:
		//	"part" name=ID title=STRING questions+=AbstractQA*;
		@Override public ParserRule getRule() { return rule; }

		//"part" name=ID title=STRING questions+=AbstractQA*
		public Group getGroup() { return cGroup; }

		//"part"
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }

		//questions+=AbstractQA*
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//AbstractQA
		public RuleCall getQuestionsAbstractQAParserRuleCall_3_0() { return cQuestionsAbstractQAParserRuleCall_3_0; }
	}

	public class QuizPartRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuizPartRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPartRefQuizPartCrossReference_2_0 = (CrossReference)cPartRefAssignment_2.eContents().get(0);
		private final RuleCall cPartRefQuizPartQNameParserRuleCall_2_0_1 = (RuleCall)cPartRefQuizPartCrossReference_2_0.eContents().get(1);
		
		//QuizPartRef:
		//	"part" "ref" partRef=[QuizPart|QName];
		@Override public ParserRule getRule() { return rule; }

		//"part" "ref" partRef=[QuizPart|QName]
		public Group getGroup() { return cGroup; }

		//"part"
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }

		//"ref"
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }

		//partRef=[QuizPart|QName]
		public Assignment getPartRefAssignment_2() { return cPartRefAssignment_2; }

		//[QuizPart|QName]
		public CrossReference getPartRefQuizPartCrossReference_2_0() { return cPartRefQuizPartCrossReference_2_0; }

		//QName
		public RuleCall getPartRefQuizPartQNameParserRuleCall_2_0_1() { return cPartRefQuizPartQNameParserRuleCall_2_0_1; }
	}

	public class AnonymousQuizPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnonymousQuizPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuizPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQuestionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionsAbstractQAParserRuleCall_1_0 = (RuleCall)cQuestionsAssignment_1.eContents().get(0);
		
		//AnonymousQuizPart returns QuizPart:
		//	{QuizPart} questions+=AbstractQA*;
		@Override public ParserRule getRule() { return rule; }

		//{QuizPart} questions+=AbstractQA*
		public Group getGroup() { return cGroup; }

		//{QuizPart}
		public Action getQuizPartAction_0() { return cQuizPartAction_0; }

		//questions+=AbstractQA*
		public Assignment getQuestionsAssignment_1() { return cQuestionsAssignment_1; }

		//AbstractQA
		public RuleCall getQuestionsAbstractQAParserRuleCall_1_0() { return cQuestionsAbstractQAParserRuleCall_1_0; }
	}

	public class AbstractQAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractQA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQAParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQARefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractQA:
		//	QA | QARef;
		@Override public ParserRule getRule() { return rule; }

		//QA | QARef
		public Alternatives getAlternatives() { return cAlternatives; }

		//QA
		public RuleCall getQAParserRuleCall_0() { return cQAParserRuleCall_0; }

		//QARef
		public RuleCall getQARefParserRuleCall_1() { return cQARefParserRuleCall_1; }
	}

	public class QARefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QARef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQaRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cQaRefQACrossReference_1_0 = (CrossReference)cQaRefAssignment_1.eContents().get(0);
		private final RuleCall cQaRefQAQNameParserRuleCall_1_0_1 = (RuleCall)cQaRefQACrossReference_1_0.eContents().get(1);
		
		//QARef:
		//	"ref" qaRef=[QA|QName];
		@Override public ParserRule getRule() { return rule; }

		//"ref" qaRef=[QA|QName]
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//qaRef=[QA|QName]
		public Assignment getQaRefAssignment_1() { return cQaRefAssignment_1; }

		//[QA|QName]
		public CrossReference getQaRefQACrossReference_1_0() { return cQaRefQACrossReference_1_0; }

		//QName
		public RuleCall getQaRefQAQNameParserRuleCall_1_0_1() { return cQaRefQAQNameParserRuleCall_1_0_1; }
	}

	public class QAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cQAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQQuestionParserRuleCall_1_0 = (RuleCall)cQAssignment_1.eContents().get(0);
		private final Assignment cAAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAAnswerParserRuleCall_2_0 = (RuleCall)cAAssignment_2.eContents().get(0);
		
		//QA:
		//	name=ID? q=Question a=Answer;
		@Override public ParserRule getRule() { return rule; }

		//name=ID? q=Question a=Answer
		public Group getGroup() { return cGroup; }

		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//q=Question
		public Assignment getQAssignment_1() { return cQAssignment_1; }

		//Question
		public RuleCall getQQuestionParserRuleCall_1_0() { return cQQuestionParserRuleCall_1_0; }

		//a=Answer
		public Assignment getAAssignment_2() { return cAAssignment_2; }

		//Answer
		public RuleCall getAAnswerParserRuleCall_2_0() { return cAAnswerParserRuleCall_2_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmlQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Question:
		//	StringQuestion | XmlQuestion;
		@Override public ParserRule getRule() { return rule; }

		//StringQuestion | XmlQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringQuestion
		public RuleCall getStringQuestionParserRuleCall_0() { return cStringQuestionParserRuleCall_0; }

		//XmlQuestion
		public RuleCall getXmlQuestionParserRuleCall_1() { return cXmlQuestionParserRuleCall_1; }
	}

	public class StringQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringQuestion");
		private final Assignment cQuestionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_0 = (RuleCall)cQuestionAssignment.eContents().get(0);
		
		//StringQuestion:
		//	question=STRING;
		@Override public ParserRule getRule() { return rule; }

		//question=STRING
		public Assignment getQuestionAssignment() { return cQuestionAssignment; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_0() { return cQuestionSTRINGTerminalRuleCall_0; }
	}

	public class XmlQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlQuestion");
		private final Assignment cXmlAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXmlXmlParserRuleCall_0 = (RuleCall)cXmlAssignment.eContents().get(0);
		
		//XmlQuestion:
		//	xml=Xml;
		@Override public ParserRule getRule() { return rule; }

		//xml=Xml
		public Assignment getXmlAssignment() { return cXmlAssignment; }

		//Xml
		public RuleCall getXmlXmlParserRuleCall_0() { return cXmlXmlParserRuleCall_0; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOptionAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionsAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Answer:
		//	OptionAnswer | OptionsAnswer;
		@Override public ParserRule getRule() { return rule; }

		//OptionAnswer | OptionsAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//OptionAnswer
		public RuleCall getOptionAnswerParserRuleCall_0() { return cOptionAnswerParserRuleCall_0; }

		//OptionsAnswer
		public RuleCall getOptionsAnswerParserRuleCall_1() { return cOptionsAnswerParserRuleCall_1; }
	}

	public class OptionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmlAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OptionAnswer:
		//	SimpleAnswer | XmlAnswer;
		@Override public ParserRule getRule() { return rule; }

		//SimpleAnswer | XmlAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleAnswer
		public RuleCall getSimpleAnswerParserRuleCall_0() { return cSimpleAnswerParserRuleCall_0; }

		//XmlAnswer
		public RuleCall getXmlAnswerParserRuleCall_1() { return cXmlAnswerParserRuleCall_1; }
	}

	public class SimpleAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegexAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberAnswerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanAnswerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleAnswer:
		//	StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer;
		@Override public ParserRule getRule() { return rule; }

		//StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringAnswer
		public RuleCall getStringAnswerParserRuleCall_0() { return cStringAnswerParserRuleCall_0; }

		//RegexAnswer
		public RuleCall getRegexAnswerParserRuleCall_1() { return cRegexAnswerParserRuleCall_1; }

		//NumberAnswer
		public RuleCall getNumberAnswerParserRuleCall_2() { return cNumberAnswerParserRuleCall_2; }

		//BooleanAnswer
		public RuleCall getBooleanAnswerParserRuleCall_3() { return cBooleanAnswerParserRuleCall_3; }
	}

	public class StringAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cIgnoreCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIgnoreCaseTildeKeyword_1_0 = (Keyword)cIgnoreCaseAssignment_1.eContents().get(0);
		
		//StringAnswer:
		//	value=STRING ignoreCase?="~"?;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING ignoreCase?="~"?
		public Group getGroup() { return cGroup; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//ignoreCase?="~"?
		public Assignment getIgnoreCaseAssignment_1() { return cIgnoreCaseAssignment_1; }

		//"~"
		public Keyword getIgnoreCaseTildeKeyword_1_0() { return cIgnoreCaseTildeKeyword_1_0; }
	}

	public class RegexAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegexAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegexpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRegexpSolidusKeyword_0_0 = (Keyword)cRegexpAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIgnoreCaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIgnoreCaseTildeKeyword_3_0 = (Keyword)cIgnoreCaseAssignment_3.eContents().get(0);
		
		//RegexAnswer returns StringAnswer:
		//	regexp?="/" value=STRING "/" ignoreCase?="~"?;
		@Override public ParserRule getRule() { return rule; }

		//regexp?="/" value=STRING "/" ignoreCase?="~"?
		public Group getGroup() { return cGroup; }

		//regexp?="/"
		public Assignment getRegexpAssignment_0() { return cRegexpAssignment_0; }

		//"/"
		public Keyword getRegexpSolidusKeyword_0_0() { return cRegexpSolidusKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//ignoreCase?="~"?
		public Assignment getIgnoreCaseAssignment_3() { return cIgnoreCaseAssignment_3; }

		//"~"
		public Keyword getIgnoreCaseTildeKeyword_3_0() { return cIgnoreCaseTildeKeyword_3_0; }
	}

	public class NumberAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberAnswer");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEDoubleObjectParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberAnswer:
		//	value=EDoubleObject;
		@Override public ParserRule getRule() { return rule; }

		//value=EDoubleObject
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EDoubleObject
		public RuleCall getValueEDoubleObjectParserRuleCall_0() { return cValueEDoubleObjectParserRuleCall_0; }
	}

	public class EDoubleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDoubleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EDoubleObject:
		//	INT ("." INT)?;
		@Override public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class BooleanAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cValueAlternatives_1_0_0 = (Alternatives)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cValueYesKeyword_1_0_0_0 = (Keyword)cValueAlternatives_1_0_0.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0_1 = (Keyword)cValueAlternatives_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Keyword cNoKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//BooleanAnswer:
		//	{BooleanAnswer} (value?=("yes" | "true") | ("no" | "false"));
		@Override public ParserRule getRule() { return rule; }

		//{BooleanAnswer} (value?=("yes" | "true") | ("no" | "false"))
		public Group getGroup() { return cGroup; }

		//{BooleanAnswer}
		public Action getBooleanAnswerAction_0() { return cBooleanAnswerAction_0; }

		//value?=("yes" | "true") | ("no" | "false")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value?=("yes" | "true")
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//"yes" | "true"
		public Alternatives getValueAlternatives_1_0_0() { return cValueAlternatives_1_0_0; }

		//"yes"
		public Keyword getValueYesKeyword_1_0_0_0() { return cValueYesKeyword_1_0_0_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0_1() { return cValueTrueKeyword_1_0_0_1; }

		//"no" | "false"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"no"
		public Keyword getNoKeyword_1_1_0() { return cNoKeyword_1_1_0; }

		//"false"
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
	}

	public class XmlAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlAnswer");
		private final Assignment cXmlAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXmlXmlParserRuleCall_0 = (RuleCall)cXmlAssignment.eContents().get(0);
		
		//XmlAnswer:
		//	xml=Xml;
		@Override public ParserRule getRule() { return rule; }

		//xml=Xml
		public Assignment getXmlAssignment() { return cXmlAssignment; }

		//Xml
		public RuleCall getXmlXmlParserRuleCall_0() { return cXmlXmlParserRuleCall_0; }
	}

	public class OptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionsAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleOptionsAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cManyOptionsAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OptionsAnswer:
		//	SingleOptionsAnswer | ManyOptionsAnswer;
		@Override public ParserRule getRule() { return rule; }

		//SingleOptionsAnswer | ManyOptionsAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleOptionsAnswer
		public RuleCall getSingleOptionsAnswerParserRuleCall_0() { return cSingleOptionsAnswerParserRuleCall_0; }

		//ManyOptionsAnswer
		public RuleCall getManyOptionsAnswerParserRuleCall_1() { return cManyOptionsAnswerParserRuleCall_1; }
	}

	public class SingleOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleOptionsAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleBoxOptionsAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleListOptionsAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Option: SingleBoxOption | SingleListOption | ManyOption;
		//SingleOptionsAnswer:
		//	SingleBoxOptionsAnswer | SingleListOptionsAnswer;
		@Override public ParserRule getRule() { return rule; }

		//SingleBoxOptionsAnswer | SingleListOptionsAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleBoxOptionsAnswer
		public RuleCall getSingleBoxOptionsAnswerParserRuleCall_0() { return cSingleBoxOptionsAnswerParserRuleCall_0; }

		//SingleListOptionsAnswer
		public RuleCall getSingleListOptionsAnswerParserRuleCall_1() { return cSingleListOptionsAnswerParserRuleCall_1; }
	}

	public class SingleBoxOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleBoxOptionsAnswer");
		private final Assignment cOptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOptionsSingleBoxOptionParserRuleCall_0 = (RuleCall)cOptionsAssignment.eContents().get(0);
		
		//SingleBoxOptionsAnswer returns SingleOptionsAnswer:
		//	options+=SingleBoxOption+;
		@Override public ParserRule getRule() { return rule; }

		//options+=SingleBoxOption+
		public Assignment getOptionsAssignment() { return cOptionsAssignment; }

		//SingleBoxOption
		public RuleCall getOptionsSingleBoxOptionParserRuleCall_0() { return cOptionsSingleBoxOptionParserRuleCall_0; }
	}

	public class SingleBoxOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleBoxOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCorrectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCorrectXKeyword_1_0 = (Keyword)cCorrectAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionOptionAnswerParserRuleCall_3_0 = (RuleCall)cOptionAssignment_3.eContents().get(0);
		
		//SingleBoxOption returns Option:
		//	"(" correct?="x"? ")" option=OptionAnswer;
		@Override public ParserRule getRule() { return rule; }

		//"(" correct?="x"? ")" option=OptionAnswer
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//correct?="x"?
		public Assignment getCorrectAssignment_1() { return cCorrectAssignment_1; }

		//"x"
		public Keyword getCorrectXKeyword_1_0() { return cCorrectXKeyword_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//option=OptionAnswer
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }

		//OptionAnswer
		public RuleCall getOptionOptionAnswerParserRuleCall_3_0() { return cOptionOptionAnswerParserRuleCall_3_0; }
	}

	public class SingleListOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleListOptionsAnswer");
		private final Assignment cOptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOptionsSingleListOptionParserRuleCall_0 = (RuleCall)cOptionsAssignment.eContents().get(0);
		
		//SingleListOptionsAnswer returns SingleOptionsAnswer:
		//	options+=SingleListOption+;
		@Override public ParserRule getRule() { return rule; }

		//options+=SingleListOption+
		public Assignment getOptionsAssignment() { return cOptionsAssignment; }

		//SingleListOption
		public RuleCall getOptionsSingleListOptionParserRuleCall_0() { return cOptionsSingleListOptionParserRuleCall_0; }
	}

	public class SingleListOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleListOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cCorrectAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCorrectVKeyword_0_1_0 = (Keyword)cCorrectAssignment_0_1.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionOptionAnswerParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		
		//SingleListOption returns Option:
		//	(("-" | "x") | correct?="v") option=OptionAnswer;
		@Override public ParserRule getRule() { return rule; }

		//(("-" | "x") | correct?="v") option=OptionAnswer
		public Group getGroup() { return cGroup; }

		//("-" | "x") | correct?="v"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"-" | "x"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_0_0() { return cHyphenMinusKeyword_0_0_0; }

		//"x"
		public Keyword getXKeyword_0_0_1() { return cXKeyword_0_0_1; }

		//correct?="v"
		public Assignment getCorrectAssignment_0_1() { return cCorrectAssignment_0_1; }

		//"v"
		public Keyword getCorrectVKeyword_0_1_0() { return cCorrectVKeyword_0_1_0; }

		//option=OptionAnswer
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }

		//OptionAnswer
		public RuleCall getOptionOptionAnswerParserRuleCall_1_0() { return cOptionOptionAnswerParserRuleCall_1_0; }
	}

	public class ManyOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManyOptionsAnswer");
		private final Assignment cOptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOptionsManyOptionParserRuleCall_0 = (RuleCall)cOptionsAssignment.eContents().get(0);
		
		//ManyOptionsAnswer:
		//	options+=ManyOption+;
		@Override public ParserRule getRule() { return rule; }

		//options+=ManyOption+
		public Assignment getOptionsAssignment() { return cOptionsAssignment; }

		//ManyOption
		public RuleCall getOptionsManyOptionParserRuleCall_0() { return cOptionsManyOptionParserRuleCall_0; }
	}

	public class ManyOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManyOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCorrectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCorrectXKeyword_1_0 = (Keyword)cCorrectAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionOptionAnswerParserRuleCall_3_0 = (RuleCall)cOptionAssignment_3.eContents().get(0);
		
		//ManyOption returns Option:
		//	"[" correct?="x"? "]" option=OptionAnswer;
		@Override public ParserRule getRule() { return rule; }

		//"[" correct?="x"? "]" option=OptionAnswer
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//correct?="x"?
		public Assignment getCorrectAssignment_1() { return cCorrectAssignment_1; }

		//"x"
		public Keyword getCorrectXKeyword_1_0() { return cCorrectXKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//option=OptionAnswer
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }

		//OptionAnswer
		public RuleCall getOptionOptionAnswerParserRuleCall_3_0() { return cOptionOptionAnswerParserRuleCall_3_0; }
	}

	public class XmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementXmlElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Xml:
		//	"<<" element=XmlElement ">>";
		@Override public ParserRule getRule() { return rule; }

		//"<<" element=XmlElement ">>"
		public Group getGroup() { return cGroup; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//element=XmlElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//XmlElement
		public RuleCall getElementXmlElementParserRuleCall_1_0() { return cElementXmlElementParserRuleCall_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class XmlContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementXmlElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Assignment cPostAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPostXML_TEXTTerminalRuleCall_1_0 = (RuleCall)cPostAssignment_1.eContents().get(0);
		
		//XmlContents:
		//	element=XmlElement post=XML_TEXT;
		@Override public ParserRule getRule() { return rule; }

		//element=XmlElement post=XML_TEXT
		public Group getGroup() { return cGroup; }

		//element=XmlElement
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }

		//XmlElement
		public RuleCall getElementXmlElementParserRuleCall_0_0() { return cElementXmlElementParserRuleCall_0_0; }

		//post=XML_TEXT
		public Assignment getPostAssignment_1() { return cPostAssignment_1; }

		//XML_TEXT
		public RuleCall getPostXML_TEXTTerminalRuleCall_1_0() { return cPostXML_TEXTTerminalRuleCall_1_0; }
	}

	public class XmlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXmlPIAnswerElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmlTagElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XmlElement:
		//	XmlPIAnswerElement | XmlTagElement;
		@Override public ParserRule getRule() { return rule; }

		//XmlPIAnswerElement | XmlTagElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//XmlPIAnswerElement
		public RuleCall getXmlPIAnswerElementParserRuleCall_0() { return cXmlPIAnswerElementParserRuleCall_0; }

		//XmlTagElement
		public RuleCall getXmlTagElementParserRuleCall_1() { return cXmlTagElementParserRuleCall_1; }
	}

	public class XmlPIAnswerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlPIAnswerElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnswerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnswerSimpleAnswerParserRuleCall_1_0 = (RuleCall)cAnswerAssignment_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XmlPIAnswerElement:
		//	"?" answer=SimpleAnswer "?";
		@Override public ParserRule getRule() { return rule; }

		//"?" answer=SimpleAnswer "?"
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//answer=SimpleAnswer
		public Assignment getAnswerAssignment_1() { return cAnswerAssignment_1; }

		//SimpleAnswer
		public RuleCall getAnswerSimpleAnswerParserRuleCall_1_0() { return cAnswerSimpleAnswerParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }
	}

	public class XmlTagElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlTagElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTagXmlTagParserRuleCall_0_0 = (RuleCall)cStartTagAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPreAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPreXML_TEXTTerminalRuleCall_1_1_0_0 = (RuleCall)cPreAssignment_1_1_0.eContents().get(0);
		private final Assignment cContentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cContentsXmlContentsParserRuleCall_1_1_1_0 = (RuleCall)cContentsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cSolidusKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cEndTagAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cEndTagIDTerminalRuleCall_1_1_2_1_0 = (RuleCall)cEndTagAssignment_1_1_2_1.eContents().get(0);
		
		//XmlTagElement:
		//	startTag=XmlTag ("/" | pre=XML_TEXT contents+=XmlContents* ("/" endTag=ID?));
		@Override public ParserRule getRule() { return rule; }

		//startTag=XmlTag ("/" | pre=XML_TEXT contents+=XmlContents* ("/" endTag=ID?))
		public Group getGroup() { return cGroup; }

		//startTag=XmlTag
		public Assignment getStartTagAssignment_0() { return cStartTagAssignment_0; }

		//XmlTag
		public RuleCall getStartTagXmlTagParserRuleCall_0_0() { return cStartTagXmlTagParserRuleCall_0_0; }

		//"/" | pre=XML_TEXT contents+=XmlContents* ("/" endTag=ID?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//pre=XML_TEXT contents+=XmlContents* ("/" endTag=ID?)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//pre=XML_TEXT
		public Assignment getPreAssignment_1_1_0() { return cPreAssignment_1_1_0; }

		//XML_TEXT
		public RuleCall getPreXML_TEXTTerminalRuleCall_1_1_0_0() { return cPreXML_TEXTTerminalRuleCall_1_1_0_0; }

		//contents+=XmlContents*
		public Assignment getContentsAssignment_1_1_1() { return cContentsAssignment_1_1_1; }

		//XmlContents
		public RuleCall getContentsXmlContentsParserRuleCall_1_1_1_0() { return cContentsXmlContentsParserRuleCall_1_1_1_0; }

		//"/" endTag=ID?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"/"
		public Keyword getSolidusKeyword_1_1_2_0() { return cSolidusKeyword_1_1_2_0; }

		//endTag=ID?
		public Assignment getEndTagAssignment_1_1_2_1() { return cEndTagAssignment_1_1_2_1; }

		//ID
		public RuleCall getEndTagIDTerminalRuleCall_1_1_2_1_0() { return cEndTagIDTerminalRuleCall_1_1_2_1_0; }
	}

	public class XmlTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesXmlAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//XmlTag:
		//	name=ID attributes+=XmlAttribute*;
		@Override public ParserRule getRule() { return rule; }

		//name=ID attributes+=XmlAttribute*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//attributes+=XmlAttribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//XmlAttribute
		public RuleCall getAttributesXmlAttributeParserRuleCall_1_0() { return cAttributesXmlAttributeParserRuleCall_1_0; }
	}

	public class XmlAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//XmlAttribute:
		//	name=ID "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final QuizElements pQuiz;
	private final QNameElements pQName;
	private final AbstractQuizPartElements pAbstractQuizPart;
	private final QuizPartElements pQuizPart;
	private final QuizPartRefElements pQuizPartRef;
	private final AnonymousQuizPartElements pAnonymousQuizPart;
	private final AbstractQAElements pAbstractQA;
	private final QARefElements pQARef;
	private final QAElements pQA;
	private final QuestionElements pQuestion;
	private final StringQuestionElements pStringQuestion;
	private final XmlQuestionElements pXmlQuestion;
	private final AnswerElements pAnswer;
	private final OptionAnswerElements pOptionAnswer;
	private final SimpleAnswerElements pSimpleAnswer;
	private final StringAnswerElements pStringAnswer;
	private final RegexAnswerElements pRegexAnswer;
	private final NumberAnswerElements pNumberAnswer;
	private final EDoubleObjectElements pEDoubleObject;
	private final BooleanAnswerElements pBooleanAnswer;
	private final XmlAnswerElements pXmlAnswer;
	private final OptionsAnswerElements pOptionsAnswer;
	private final SingleOptionsAnswerElements pSingleOptionsAnswer;
	private final SingleBoxOptionsAnswerElements pSingleBoxOptionsAnswer;
	private final SingleBoxOptionElements pSingleBoxOption;
	private final SingleListOptionsAnswerElements pSingleListOptionsAnswer;
	private final SingleListOptionElements pSingleListOption;
	private final ManyOptionsAnswerElements pManyOptionsAnswer;
	private final ManyOptionElements pManyOption;
	private final XmlElements pXml;
	private final XmlContentsElements pXmlContents;
	private final XmlElementElements pXmlElement;
	private final XmlPIAnswerElementElements pXmlPIAnswerElement;
	private final XmlTagElementElements pXmlTagElement;
	private final XmlTagElements pXmlTag;
	private final XmlAttributeElements pXmlAttribute;
	private final TerminalRule tXML_TEXT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XQuizGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuiz = new QuizElements();
		this.pQName = new QNameElements();
		this.pAbstractQuizPart = new AbstractQuizPartElements();
		this.pQuizPart = new QuizPartElements();
		this.pQuizPartRef = new QuizPartRefElements();
		this.pAnonymousQuizPart = new AnonymousQuizPartElements();
		this.pAbstractQA = new AbstractQAElements();
		this.pQARef = new QARefElements();
		this.pQA = new QAElements();
		this.pQuestion = new QuestionElements();
		this.pStringQuestion = new StringQuestionElements();
		this.pXmlQuestion = new XmlQuestionElements();
		this.pAnswer = new AnswerElements();
		this.pOptionAnswer = new OptionAnswerElements();
		this.pSimpleAnswer = new SimpleAnswerElements();
		this.pStringAnswer = new StringAnswerElements();
		this.pRegexAnswer = new RegexAnswerElements();
		this.pNumberAnswer = new NumberAnswerElements();
		this.pEDoubleObject = new EDoubleObjectElements();
		this.pBooleanAnswer = new BooleanAnswerElements();
		this.pXmlAnswer = new XmlAnswerElements();
		this.pOptionsAnswer = new OptionsAnswerElements();
		this.pSingleOptionsAnswer = new SingleOptionsAnswerElements();
		this.pSingleBoxOptionsAnswer = new SingleBoxOptionsAnswerElements();
		this.pSingleBoxOption = new SingleBoxOptionElements();
		this.pSingleListOptionsAnswer = new SingleListOptionsAnswerElements();
		this.pSingleListOption = new SingleListOptionElements();
		this.pManyOptionsAnswer = new ManyOptionsAnswerElements();
		this.pManyOption = new ManyOptionElements();
		this.pXml = new XmlElements();
		this.pXmlContents = new XmlContentsElements();
		this.pXmlElement = new XmlElementElements();
		this.pXmlPIAnswerElement = new XmlPIAnswerElementElements();
		this.pXmlTagElement = new XmlTagElementElements();
		this.pXmlTag = new XmlTagElements();
		this.pXmlAttribute = new XmlAttributeElements();
		this.tXML_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hal.pg.quiz.xtext.XQuiz".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Quiz:
	//	{Quiz} "quiz" (name=QName? title=STRING? parts+=AbstractQuizPart* | parts+=AnonymousQuizPart);
	public QuizElements getQuizAccess() {
		return pQuiz;
	}
	
	public ParserRule getQuizRule() {
		return getQuizAccess().getRule();
	}

	//QName:
	//	ID ("." ID)*;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//AbstractQuizPart:
	//	QuizPart | QuizPartRef;
	public AbstractQuizPartElements getAbstractQuizPartAccess() {
		return pAbstractQuizPart;
	}
	
	public ParserRule getAbstractQuizPartRule() {
		return getAbstractQuizPartAccess().getRule();
	}

	//QuizPart:
	//	"part" name=ID title=STRING questions+=AbstractQA*;
	public QuizPartElements getQuizPartAccess() {
		return pQuizPart;
	}
	
	public ParserRule getQuizPartRule() {
		return getQuizPartAccess().getRule();
	}

	//QuizPartRef:
	//	"part" "ref" partRef=[QuizPart|QName];
	public QuizPartRefElements getQuizPartRefAccess() {
		return pQuizPartRef;
	}
	
	public ParserRule getQuizPartRefRule() {
		return getQuizPartRefAccess().getRule();
	}

	//AnonymousQuizPart returns QuizPart:
	//	{QuizPart} questions+=AbstractQA*;
	public AnonymousQuizPartElements getAnonymousQuizPartAccess() {
		return pAnonymousQuizPart;
	}
	
	public ParserRule getAnonymousQuizPartRule() {
		return getAnonymousQuizPartAccess().getRule();
	}

	//AbstractQA:
	//	QA | QARef;
	public AbstractQAElements getAbstractQAAccess() {
		return pAbstractQA;
	}
	
	public ParserRule getAbstractQARule() {
		return getAbstractQAAccess().getRule();
	}

	//QARef:
	//	"ref" qaRef=[QA|QName];
	public QARefElements getQARefAccess() {
		return pQARef;
	}
	
	public ParserRule getQARefRule() {
		return getQARefAccess().getRule();
	}

	//QA:
	//	name=ID? q=Question a=Answer;
	public QAElements getQAAccess() {
		return pQA;
	}
	
	public ParserRule getQARule() {
		return getQAAccess().getRule();
	}

	//Question:
	//	StringQuestion | XmlQuestion;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//StringQuestion:
	//	question=STRING;
	public StringQuestionElements getStringQuestionAccess() {
		return pStringQuestion;
	}
	
	public ParserRule getStringQuestionRule() {
		return getStringQuestionAccess().getRule();
	}

	//XmlQuestion:
	//	xml=Xml;
	public XmlQuestionElements getXmlQuestionAccess() {
		return pXmlQuestion;
	}
	
	public ParserRule getXmlQuestionRule() {
		return getXmlQuestionAccess().getRule();
	}

	//Answer:
	//	OptionAnswer | OptionsAnswer;
	public AnswerElements getAnswerAccess() {
		return pAnswer;
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//OptionAnswer:
	//	SimpleAnswer | XmlAnswer;
	public OptionAnswerElements getOptionAnswerAccess() {
		return pOptionAnswer;
	}
	
	public ParserRule getOptionAnswerRule() {
		return getOptionAnswerAccess().getRule();
	}

	//SimpleAnswer:
	//	StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer;
	public SimpleAnswerElements getSimpleAnswerAccess() {
		return pSimpleAnswer;
	}
	
	public ParserRule getSimpleAnswerRule() {
		return getSimpleAnswerAccess().getRule();
	}

	//StringAnswer:
	//	value=STRING ignoreCase?="~"?;
	public StringAnswerElements getStringAnswerAccess() {
		return pStringAnswer;
	}
	
	public ParserRule getStringAnswerRule() {
		return getStringAnswerAccess().getRule();
	}

	//RegexAnswer returns StringAnswer:
	//	regexp?="/" value=STRING "/" ignoreCase?="~"?;
	public RegexAnswerElements getRegexAnswerAccess() {
		return pRegexAnswer;
	}
	
	public ParserRule getRegexAnswerRule() {
		return getRegexAnswerAccess().getRule();
	}

	//NumberAnswer:
	//	value=EDoubleObject;
	public NumberAnswerElements getNumberAnswerAccess() {
		return pNumberAnswer;
	}
	
	public ParserRule getNumberAnswerRule() {
		return getNumberAnswerAccess().getRule();
	}

	//EDoubleObject:
	//	INT ("." INT)?;
	public EDoubleObjectElements getEDoubleObjectAccess() {
		return pEDoubleObject;
	}
	
	public ParserRule getEDoubleObjectRule() {
		return getEDoubleObjectAccess().getRule();
	}

	//BooleanAnswer:
	//	{BooleanAnswer} (value?=("yes" | "true") | ("no" | "false"));
	public BooleanAnswerElements getBooleanAnswerAccess() {
		return pBooleanAnswer;
	}
	
	public ParserRule getBooleanAnswerRule() {
		return getBooleanAnswerAccess().getRule();
	}

	//XmlAnswer:
	//	xml=Xml;
	public XmlAnswerElements getXmlAnswerAccess() {
		return pXmlAnswer;
	}
	
	public ParserRule getXmlAnswerRule() {
		return getXmlAnswerAccess().getRule();
	}

	//OptionsAnswer:
	//	SingleOptionsAnswer | ManyOptionsAnswer;
	public OptionsAnswerElements getOptionsAnswerAccess() {
		return pOptionsAnswer;
	}
	
	public ParserRule getOptionsAnswerRule() {
		return getOptionsAnswerAccess().getRule();
	}

	//// Option: SingleBoxOption | SingleListOption | ManyOption;
	//SingleOptionsAnswer:
	//	SingleBoxOptionsAnswer | SingleListOptionsAnswer;
	public SingleOptionsAnswerElements getSingleOptionsAnswerAccess() {
		return pSingleOptionsAnswer;
	}
	
	public ParserRule getSingleOptionsAnswerRule() {
		return getSingleOptionsAnswerAccess().getRule();
	}

	//SingleBoxOptionsAnswer returns SingleOptionsAnswer:
	//	options+=SingleBoxOption+;
	public SingleBoxOptionsAnswerElements getSingleBoxOptionsAnswerAccess() {
		return pSingleBoxOptionsAnswer;
	}
	
	public ParserRule getSingleBoxOptionsAnswerRule() {
		return getSingleBoxOptionsAnswerAccess().getRule();
	}

	//SingleBoxOption returns Option:
	//	"(" correct?="x"? ")" option=OptionAnswer;
	public SingleBoxOptionElements getSingleBoxOptionAccess() {
		return pSingleBoxOption;
	}
	
	public ParserRule getSingleBoxOptionRule() {
		return getSingleBoxOptionAccess().getRule();
	}

	//SingleListOptionsAnswer returns SingleOptionsAnswer:
	//	options+=SingleListOption+;
	public SingleListOptionsAnswerElements getSingleListOptionsAnswerAccess() {
		return pSingleListOptionsAnswer;
	}
	
	public ParserRule getSingleListOptionsAnswerRule() {
		return getSingleListOptionsAnswerAccess().getRule();
	}

	//SingleListOption returns Option:
	//	(("-" | "x") | correct?="v") option=OptionAnswer;
	public SingleListOptionElements getSingleListOptionAccess() {
		return pSingleListOption;
	}
	
	public ParserRule getSingleListOptionRule() {
		return getSingleListOptionAccess().getRule();
	}

	//ManyOptionsAnswer:
	//	options+=ManyOption+;
	public ManyOptionsAnswerElements getManyOptionsAnswerAccess() {
		return pManyOptionsAnswer;
	}
	
	public ParserRule getManyOptionsAnswerRule() {
		return getManyOptionsAnswerAccess().getRule();
	}

	//ManyOption returns Option:
	//	"[" correct?="x"? "]" option=OptionAnswer;
	public ManyOptionElements getManyOptionAccess() {
		return pManyOption;
	}
	
	public ParserRule getManyOptionRule() {
		return getManyOptionAccess().getRule();
	}

	//Xml:
	//	"<<" element=XmlElement ">>";
	public XmlElements getXmlAccess() {
		return pXml;
	}
	
	public ParserRule getXmlRule() {
		return getXmlAccess().getRule();
	}

	//XmlContents:
	//	element=XmlElement post=XML_TEXT;
	public XmlContentsElements getXmlContentsAccess() {
		return pXmlContents;
	}
	
	public ParserRule getXmlContentsRule() {
		return getXmlContentsAccess().getRule();
	}

	//XmlElement:
	//	XmlPIAnswerElement | XmlTagElement;
	public XmlElementElements getXmlElementAccess() {
		return pXmlElement;
	}
	
	public ParserRule getXmlElementRule() {
		return getXmlElementAccess().getRule();
	}

	//XmlPIAnswerElement:
	//	"?" answer=SimpleAnswer "?";
	public XmlPIAnswerElementElements getXmlPIAnswerElementAccess() {
		return pXmlPIAnswerElement;
	}
	
	public ParserRule getXmlPIAnswerElementRule() {
		return getXmlPIAnswerElementAccess().getRule();
	}

	//XmlTagElement:
	//	startTag=XmlTag ("/" | pre=XML_TEXT contents+=XmlContents* ("/" endTag=ID?));
	public XmlTagElementElements getXmlTagElementAccess() {
		return pXmlTagElement;
	}
	
	public ParserRule getXmlTagElementRule() {
		return getXmlTagElementAccess().getRule();
	}

	//XmlTag:
	//	name=ID attributes+=XmlAttribute*;
	public XmlTagElements getXmlTagAccess() {
		return pXmlTag;
	}
	
	public ParserRule getXmlTagRule() {
		return getXmlTagAccess().getRule();
	}

	//XmlAttribute:
	//	name=ID "=" value=STRING;
	public XmlAttributeElements getXmlAttributeAccess() {
		return pXmlAttribute;
	}
	
	public ParserRule getXmlAttributeRule() {
		return getXmlAttributeAccess().getRule();
	}

	//terminal XML_TEXT:
	//	">" ("<" | !("<" | ">") !"<"* "<");
	public TerminalRule getXML_TEXTRule() {
		return tXML_TEXT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
