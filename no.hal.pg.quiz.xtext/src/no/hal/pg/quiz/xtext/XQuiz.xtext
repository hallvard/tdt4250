// automatically generated by Xtext
grammar no.hal.pg.quiz.xtext.XQuiz with org.eclipse.xtext.common.Terminals

import "platform:/plugin/no.hal.pg.quiz.model/model/quiz.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Quiz:
	{Quiz} 'quiz'
	(
		(
			(name = QName)? (title = STRING)?
			(parts += AbstractQuizPart)*
		) |
		(parts += AnonymousQuizPart)
	)
;

QName:
  ID ('.' ID)*
;

AbstractQuizPart: QuizPart | QuizPartRef;

QuizPart:
	'part' (name = ID) (title = STRING)
	(questions += AbstractQA)*
;

QuizPartRef:
	'part' 'ref' partRef = [QuizPart | QName]
;

AnonymousQuizPart returns QuizPart:
	{QuizPart} (questions += AbstractQA)*
;

AbstractQA: QA | QARef;

QARef:
	'ref' qaRef = [QA | QName]
;

QA:
	(name = ID)?
	q = Question
	a = Answer
;

Question: StringQuestion | XmlQuestion;

StringQuestion:
	question = STRING
;

XmlQuestion: xml = Xml;

Answer: OptionAnswer | OptionsAnswer;

OptionAnswer: SimpleAnswer | XmlAnswer;

SimpleAnswer: StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer;

StringAnswer: value = STRING (ignoreCase ?= '~')?;
RegexAnswer returns StringAnswer: (regexp ?= '/') value = STRING '/' (ignoreCase ?= '~')?;

NumberAnswer: value = EDoubleObject;

EDoubleObject: INT ('.' INT)?;

BooleanAnswer: {BooleanAnswer} (value ?= ('yes' | 'true') | ('no' | 'false'));

XmlAnswer:
	xml = Xml
;

OptionsAnswer: (SingleOptionsAnswer | ManyOptionsAnswer);

// Option: SingleBoxOption | SingleListOption | ManyOption;

SingleOptionsAnswer: SingleBoxOptionsAnswer | SingleListOptionsAnswer;

SingleBoxOptionsAnswer returns SingleOptionsAnswer:
	(options += SingleBoxOption)+
;
SingleBoxOption returns Option:
	'(' (correct ?= 'x')? ')' option = OptionAnswer
;

SingleListOptionsAnswer returns SingleOptionsAnswer:
	(options += SingleListOption)+
;
SingleListOption returns Option:
	(('-'|'x') | (correct ?= 'v')) option = OptionAnswer
;

ManyOptionsAnswer:
	(options += ManyOption)+
;
ManyOption returns Option:
	'[' (correct ?= 'x')? ']' option = OptionAnswer
;

Xml:
	'<<' element = XmlElement '>>'
;

XmlContents:
	element = XmlElement
	post = XML_TEXT
;

XmlElement: XmlPIAnswerElement | XmlTagElement;

XmlPIAnswerElement:
	'?' answer = SimpleAnswer '?'
;

XmlTagElement:
	startTag = XmlTag ('/' |
		(pre = XML_TEXT (contents += XmlContents)* ('/' (endTag = ID)?))
	)
;

XmlTag:
	name = ID (attributes += XmlAttribute)*	
;

XmlAttribute:
	name = ID '=' value = STRING
;

terminal XML_TEXT: '>' ('<' | (! ('<'|'>')) (! '<')* ('<'));
