/**
 * generated by Xtext
 */
package no.hal.quiz.html;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import no.hal.quiz.AbstractQA;
import no.hal.quiz.AbstractQuizPart;
import no.hal.quiz.Answer;
import no.hal.quiz.BooleanAnswer;
import no.hal.quiz.ManyOptionsAnswer;
import no.hal.quiz.NumberAnswer;
import no.hal.quiz.Option;
import no.hal.quiz.OptionAnswer;
import no.hal.quiz.OptionsAnswer;
import no.hal.quiz.QA;
import no.hal.quiz.QARef;
import no.hal.quiz.Question;
import no.hal.quiz.Quiz;
import no.hal.quiz.QuizPart;
import no.hal.quiz.QuizPartRef;
import no.hal.quiz.SimpleAnswer;
import no.hal.quiz.SingleOptionsAnswer;
import no.hal.quiz.StringAnswer;
import no.hal.quiz.StringQuestion;
import no.hal.quiz.Xml;
import no.hal.quiz.XmlAnswer;
import no.hal.quiz.XmlAttribute;
import no.hal.quiz.XmlContents;
import no.hal.quiz.XmlElement;
import no.hal.quiz.XmlPIAnswerElement;
import no.hal.quiz.XmlQuestion;
import no.hal.quiz.XmlTag;
import no.hal.quiz.XmlTagElement;
import no.hal.quiz.html.XhtmlUtil;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.w3c.xhtml1.BodyType;
import org.w3c.xhtml1.BrType;
import org.w3c.xhtml1.ButtonType;
import org.w3c.xhtml1.DivType;
import org.w3c.xhtml1.FormType;
import org.w3c.xhtml1.H2Type;
import org.w3c.xhtml1.HeadType;
import org.w3c.xhtml1.HrType;
import org.w3c.xhtml1.HtmlType;
import org.w3c.xhtml1.InputType;
import org.w3c.xhtml1.InputType1;
import org.w3c.xhtml1.LabelType;
import org.w3c.xhtml1.MetaType;
import org.w3c.xhtml1.ScriptType;
import org.w3c.xhtml1.TitleType;
import org.w3c.xhtml1.Xhtml1Factory;
import org.w3c.xhtml1.util.Xhtml1ResourceFactoryImpl;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class Quiz2XhtmlGenerator {
  private Xhtml1ResourceFactoryImpl xhtml1ResourceFactoryImpl = new Xhtml1ResourceFactoryImpl();
  
  public String generateQuizHtmlString(final Quiz quiz) {
    try {
      String _xblockexpression = null;
      {
        final String encoding = "UTF-8";
        final HtmlType html = this.generateQuizHtmlType(quiz);
        String _xifexpression = null;
        String _name = quiz.getName();
        boolean _notEquals = (!Objects.equal(_name, null));
        if (_notEquals) {
          String _name_1 = quiz.getName();
          _xifexpression = _name_1.replace(".", "/");
        } else {
          _xifexpression = "quiz";
        }
        final String fileName = (_xifexpression + ".html");
        URI _createFileURI = URI.createFileURI(fileName);
        Resource _createResource = this.xhtml1ResourceFactoryImpl.createResource(_createFileURI);
        final XMLResource resource = ((XMLResource) _createResource);
        Map<Object, Object> _defaultSaveOptions = resource.getDefaultSaveOptions();
        _defaultSaveOptions.put(XMLResource.OPTION_ENCODING, encoding);
        EList<EObject> _contents = resource.getContents();
        _contents.add(html);
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(4096);
        resource.save(outputStream, null);
        final String originalOutput = outputStream.toString(encoding);
        String _replace = originalOutput.replace("<xhtml:", "<");
        String _replace_1 = _replace.replace("</xhtml:", "</");
        final String cleanedOutput = _replace_1.replace("<html_._type xmlns:xhtml=", "<html xmlns=");
        _xblockexpression = cleanedOutput;
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Extension
  private Xhtml1Factory xhtml1Factory = Xhtml1Factory.eINSTANCE;
  
  @Extension
  private XhtmlUtil xhtmlUtil = new XhtmlUtil();
  
  public HtmlType generateQuizHtmlType(final Quiz quiz) {
    HtmlType _xblockexpression = null;
    {
      HtmlType _createHtmlType = this.xhtml1Factory.createHtmlType();
      final Procedure1<HtmlType> _function = new Procedure1<HtmlType>() {
        @Override
        public void apply(final HtmlType it) {
          HeadType _createHeadType = Quiz2XhtmlGenerator.this.xhtml1Factory.createHeadType();
          final Procedure1<HeadType> _function = new Procedure1<HeadType>() {
            @Override
            public void apply(final HeadType it) {
              TitleType _createTitleType = Quiz2XhtmlGenerator.this.xhtml1Factory.createTitleType();
              final Procedure1<TitleType> _function = new Procedure1<TitleType>() {
                @Override
                public void apply(final TitleType it) {
                  String _elvis = null;
                  String _title = quiz.getTitle();
                  if (_title != null) {
                    _elvis = _title;
                  } else {
                    String _name = quiz.getName();
                    _elvis = _name;
                  }
                  Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _elvis);
                }
              };
              TitleType _doubleArrow = ObjectExtensions.<TitleType>operator_doubleArrow(_createTitleType, _function);
              it.setTitle(_doubleArrow);
              EList<MetaType> _meta = it.getMeta();
              MetaType _createMetaType = Quiz2XhtmlGenerator.this.xhtml1Factory.createMetaType();
              final Procedure1<MetaType> _function_1 = new Procedure1<MetaType>() {
                @Override
                public void apply(final MetaType it) {
                  it.setHttpEquiv("content-type");
                  it.setContent("text/html; charset=UTF-8");
                }
              };
              MetaType _doubleArrow_1 = ObjectExtensions.<MetaType>operator_doubleArrow(_createMetaType, _function_1);
              _meta.add(_doubleArrow_1);
            }
          };
          HeadType _doubleArrow = ObjectExtensions.<HeadType>operator_doubleArrow(_createHeadType, _function);
          it.setHead(_doubleArrow);
          BodyType _createBodyType = Quiz2XhtmlGenerator.this.xhtml1Factory.createBodyType();
          final Procedure1<BodyType> _function_1 = new Procedure1<BodyType>() {
            @Override
            public void apply(final BodyType it) {
              EList<AbstractQuizPart> _parts = quiz.getParts();
              for (final AbstractQuizPart part : _parts) {
                Iterable<? extends EObject> _generate = Quiz2XhtmlGenerator.this.generate(part);
                Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _generate);
              }
              EList<ScriptType> _script = it.getScript();
              ScriptType _createScriptType = Quiz2XhtmlGenerator.this.xhtml1Factory.createScriptType();
              final Procedure1<ScriptType> _function = new Procedure1<ScriptType>() {
                @Override
                public void apply(final ScriptType it) {
                  it.setType("text/javascript");
                  StringConcatenation _builder = new StringConcatenation();
                  _builder.append("function isArray(o) {");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return o.length !== undefined;");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("function getInputElement(name) {");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return document.getElementById(name);");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("function hasModifier(s, mod) {");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return s.indexOf(mod) >= 0;");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("function checkInputEquals(input, prop, value, modifiers) {");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("if (typeof input === \'string\') {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("input = getInputElement(input);");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("var inputValue = input[prop];");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("if (hasModifier(modifiers, \'_\')) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("inputValue = inputValue.toLowerCase();");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("var matches = (inputValue == value);");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("if (hasModifier(modifiers, \'~\')) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("var regexpObject = new RegExp(value, \"\");");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("matches = regexpObject.test(inputValue);");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return [input, matches];");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("function validatedInput(result) {");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("var input = result[0];");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("if (isArray(input)) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("for (var i = 0; i < result.length; i++) {");
                  _builder.newLine();
                  _builder.append("\t\t\t");
                  _builder.append("validatedInput(result[i]);");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("return;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("var valid = true;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("for (var i = 1; i < result.length; i++) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("if (! result[i]) {");
                  _builder.newLine();
                  _builder.append("\t\t\t");
                  _builder.append("valid = false;");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("var color = \"YellowGreen\";");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("if (! valid) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("color = \"Red\";");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("input.style.backgroundColor = color;");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  EList<AbstractQuizPart> _parts = quiz.getParts();
                  final Function1<AbstractQuizPart, String> _function = new Function1<AbstractQuizPart, String>() {
                    @Override
                    public String apply(final AbstractQuizPart it) {
                      return Quiz2XhtmlGenerator.this.generateCheckFunction(it);
                    }
                  };
                  List<String> _map = ListExtensions.<AbstractQuizPart, String>map(_parts, _function);
                  String _join = IterableExtensions.join(_map);
                  String _plus = (_builder.toString() + _join);
                  Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _plus);
                }
              };
              ScriptType _doubleArrow = ObjectExtensions.<ScriptType>operator_doubleArrow(_createScriptType, _function);
              _script.add(_doubleArrow);
            }
          };
          BodyType _doubleArrow_1 = ObjectExtensions.<BodyType>operator_doubleArrow(_createBodyType, _function_1);
          it.setBody(_doubleArrow_1);
        }
      };
      final HtmlType html = ObjectExtensions.<HtmlType>operator_doubleArrow(_createHtmlType, _function);
      _xblockexpression = html;
    }
    return _xblockexpression;
  }
  
  protected Iterable<? extends EObject> _generate(final QuizPartRef quizPartRef) {
    QuizPart _partRef = quizPartRef.getPartRef();
    return this.generate(_partRef);
  }
  
  protected Iterable<? extends EObject> _generate(final QuizPart quizPart) {
    HrType _createHrType = this.xhtml1Factory.createHrType();
    H2Type _createH2Type = this.xhtml1Factory.createH2Type();
    final Procedure1<H2Type> _function = new Procedure1<H2Type>() {
      @Override
      public void apply(final H2Type it) {
        String _title = quizPart.getTitle();
        Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _title);
      }
    };
    H2Type _doubleArrow = ObjectExtensions.<H2Type>operator_doubleArrow(_createH2Type, _function);
    FormType _createFormType = this.xhtml1Factory.createFormType();
    DivType _createDivType = this.xhtml1Factory.createDivType();
    final Procedure1<DivType> _function_1 = new Procedure1<DivType>() {
      @Override
      public void apply(final DivType it) {
        String _name = quizPart.getName();
        it.setId(_name);
        EList<AbstractQA> _questions = quizPart.getQuestions();
        for (final AbstractQA question : _questions) {
          Iterable<? extends EObject> _generate = Quiz2XhtmlGenerator.this.generate(question);
          Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _generate);
        }
      }
    };
    DivType _doubleArrow_1 = ObjectExtensions.<DivType>operator_doubleArrow(_createDivType, _function_1);
    EObject _add = this.xhtmlUtil.operator_add(_createFormType, _doubleArrow_1);
    DivType _createDivType_1 = this.xhtml1Factory.createDivType();
    DivType _createDivType_2 = this.xhtml1Factory.createDivType();
    ButtonType _createButtonType = this.xhtml1Factory.createButtonType();
    final Procedure1<ButtonType> _function_2 = new Procedure1<ButtonType>() {
      @Override
      public void apply(final ButtonType it) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("check");
        String _name = quizPart.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append("()\'>");
        it.setOnclick(_builder.toString());
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("Check ");
        String _title = quizPart.getTitle();
        _builder_1.append(_title, "");
        Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _builder_1);
      }
    };
    ButtonType _doubleArrow_2 = ObjectExtensions.<ButtonType>operator_doubleArrow(_createButtonType, _function_2);
    EObject _add_1 = this.xhtmlUtil.operator_add(_createDivType_2, _doubleArrow_2);
    return Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(_createHrType, _doubleArrow, _add, _createDivType_1, _add_1));
  }
  
  protected String _generateCheckFunction(final QuizPartRef quizPartRef) {
    QuizPart _partRef = quizPartRef.getPartRef();
    return this.generateCheckFunction(_partRef);
  }
  
  protected String _generateCheckFunction(final QuizPart quizPart) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function check");
    String _name = quizPart.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    {
      EList<AbstractQA> _questions = quizPart.getQuestions();
      for(final AbstractQA qa : _questions) {
        _builder.append("\t");
        _builder.append("validatedInput(check");
        String _name_1 = this.name(qa);
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        _builder.append(_firstUpper_1, "\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    EList<AbstractQA> _questions_1 = quizPart.getQuestions();
    final Function1<AbstractQA, String> _function = new Function1<AbstractQA, String>() {
      @Override
      public String apply(final AbstractQA it) {
        return Quiz2XhtmlGenerator.this.generateCheckFunction(it);
      }
    };
    List<String> _map = ListExtensions.<AbstractQA, String>map(_questions_1, _function);
    String _join = IterableExtensions.join(_map);
    return (_builder.toString() + _join);
  }
  
  protected Iterable<? extends EObject> _generate(final QARef qaRef) {
    QA _qaRef = qaRef.getQaRef();
    return this.generate(_qaRef);
  }
  
  protected String _generateCheckFunction(final QARef qaRef) {
    QA _qaRef = qaRef.getQaRef();
    return this.generateCheckFunction(_qaRef);
  }
  
  protected Iterable<? extends EObject> _generate(final QA qa) {
    Question _q = qa.getQ();
    EObject _generateOutput = this.generateOutput(_q);
    Answer _a = qa.getA();
    EObject _generateInput = this.generateInput(_a);
    return Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(_generateOutput, _generateInput));
  }
  
  protected String _generateCheckFunction(final QA qa) {
    Answer _a = qa.getA();
    return this.generateCheckFunction(_a);
  }
  
  protected EObject _generateOutput(final StringQuestion sq) {
    DivType _createDivType = this.xhtml1Factory.createDivType();
    String _question = sq.getQuestion();
    return this.xhtmlUtil.operator_add(_createDivType, _question);
  }
  
  protected EObject _generateOutput(final XmlQuestion xq) {
    Xml _xml = xq.getXml();
    return this.generateOutput(_xml);
  }
  
  protected EObject _generateInput(final Answer answer) {
    return null;
  }
  
  public EObject generateInputElement(final Answer answer, final InputType type) {
    InputType1 _xblockexpression = null;
    {
      final String name = this.name(answer);
      InputType1 _createInputType1 = this.xhtml1Factory.createInputType1();
      final Procedure1<InputType1> _function = new Procedure1<InputType1>() {
        @Override
        public void apply(final InputType1 it) {
          it.setType(type);
          it.setId(name);
          it.setName(name);
        }
      };
      _xblockexpression = ObjectExtensions.<InputType1>operator_doubleArrow(_createInputType1, _function);
    }
    return _xblockexpression;
  }
  
  protected EObject _generateInput(final StringAnswer answer) {
    DivType _createDivType = this.xhtml1Factory.createDivType();
    EObject _generateInputElement = this.generateInputElement(answer, InputType.TEXT);
    return this.xhtmlUtil.operator_add(_createDivType, _generateInputElement);
  }
  
  protected String _generateCheckFunction(final StringAnswer answer) {
    String _xblockexpression = null;
    {
      String _xifexpression = null;
      boolean _isRegexp = answer.isRegexp();
      if (_isRegexp) {
        _xifexpression = "~";
      } else {
        _xifexpression = "";
      }
      String _xifexpression_1 = null;
      boolean _isIgnoreCase = answer.isIgnoreCase();
      if (_isIgnoreCase) {
        _xifexpression_1 = "_";
      } else {
        _xifexpression_1 = "";
      }
      final String modifiers = (_xifexpression + _xifexpression_1);
      StringConcatenation _builder = new StringConcatenation();
      String _checkFunctionHead = this.checkFunctionHead(answer);
      _builder.append(_checkFunctionHead, "");
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("return checkInputEquals(\'");
      String _name = this.name(answer);
      _builder.append(_name, "\t");
      _builder.append("\', \'value\', \'");
      String _value = answer.getValue();
      _builder.append(_value, "\t");
      _builder.append("\', \'");
      _builder.append(modifiers, "\t");
      _builder.append("\');");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  protected EObject _generateInput(final NumberAnswer answer) {
    return this.generateInputElement(answer, InputType.TEXT);
  }
  
  protected String _generateCheckFunction(final NumberAnswer answer) {
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return checkInputEquals(\'");
    String _name = this.name(answer);
    _builder.append(_name, "\t");
    _builder.append("\', \'value\', \'");
    Double _value = answer.getValue();
    _builder.append(_value, "\t");
    _builder.append("\', \'\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  private int idNum = 0;
  
  public String genId() {
    String _xblockexpression = null;
    {
      this.idNum++;
      _xblockexpression = ("id_" + Integer.valueOf(this.idNum));
    }
    return _xblockexpression;
  }
  
  public EObject appendInputType(final EObject owner, final InputType inputType, final String name, final String value, final String id) {
    EObject _xblockexpression = null;
    {
      InputType1 _createInputType1 = this.xhtml1Factory.createInputType1();
      final Procedure1<InputType1> _function = new Procedure1<InputType1>() {
        @Override
        public void apply(final InputType1 it) {
          it.setType(inputType);
          it.setName(name);
          boolean _notEquals = (!Objects.equal(value, null));
          if (_notEquals) {
            it.setValue(value);
          }
          it.setId(id);
        }
      };
      InputType1 _doubleArrow = ObjectExtensions.<InputType1>operator_doubleArrow(_createInputType1, _function);
      this.xhtmlUtil.operator_add(owner, _doubleArrow);
      EObject _xifexpression = null;
      boolean _notEquals = (!Objects.equal(value, null));
      if (_notEquals) {
        LabelType _createLabelType = this.xhtml1Factory.createLabelType();
        final Procedure1<LabelType> _function_1 = new Procedure1<LabelType>() {
          @Override
          public void apply(final LabelType it) {
            it.setFor(id);
            Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, value);
          }
        };
        LabelType _doubleArrow_1 = ObjectExtensions.<LabelType>operator_doubleArrow(_createLabelType, _function_1);
        _xifexpression = this.xhtmlUtil.operator_add(owner, _doubleArrow_1);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected EObject _generateInput(final BooleanAnswer answer) {
    DivType _xblockexpression = null;
    {
      final String id = this.name(answer);
      DivType _createDivType = this.xhtml1Factory.createDivType();
      final Procedure1<DivType> _function = new Procedure1<DivType>() {
        @Override
        public void apply(final DivType it) {
          it.setId(id);
          Quiz2XhtmlGenerator.this.appendInputType(it, InputType.RADIO, "radio", "Yes", (id + "_yes"));
          Quiz2XhtmlGenerator.this.appendInputType(it, InputType.RADIO, "radio", "No", (id + "_no"));
        }
      };
      _xblockexpression = ObjectExtensions.<DivType>operator_doubleArrow(_createDivType, _function);
    }
    return _xblockexpression;
  }
  
  protected String _generateCheckFunction(final BooleanAnswer answer) {
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var input = getInputElement(\'");
    String _name = this.name(answer);
    _builder.append(_name, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return [input, input.getElementsByTagName(\"input\")[");
    int _xifexpression = (int) 0;
    Boolean _value = answer.getValue();
    boolean _equals = Objects.equal(Boolean.TRUE, _value);
    if (_equals) {
      _xifexpression = 0;
    } else {
      _xifexpression = 1;
    }
    _builder.append(_xifexpression, "\t");
    _builder.append("].checked];");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected EObject _generateXml(final Xml xml, final Function1<? super XmlPIAnswerElement, ? extends EObject> piAnswerHandler) {
    XmlElement _element = xml.getElement();
    return this.generateXml(_element, piAnswerHandler);
  }
  
  protected EObject _generateXml(final XmlTagElement xml, final Function1<? super XmlPIAnswerElement, ? extends EObject> piAnswerHandler) {
    EObject _xblockexpression = null;
    {
      XmlTag _startTag = xml.getStartTag();
      String _name = _startTag.getName();
      final EObject tag = this.xhtmlUtil.create(_name);
      XmlTag _startTag_1 = xml.getStartTag();
      EList<XmlAttribute> _attributes = _startTag_1.getAttributes();
      for (final XmlAttribute attribute : _attributes) {
        String _name_1 = attribute.getName();
        String _value = attribute.getValue();
        Pair<String, String> _mappedTo = Pair.<String, String>of(_name_1, _value);
        this.xhtmlUtil.operator_add(tag, _mappedTo);
      }
      String _endTag = xml.getEndTag();
      boolean _notEquals = (!Objects.equal(_endTag, null));
      if (_notEquals) {
        String _pre = xml.getPre();
        String _pre_1 = xml.getPre();
        int _length = _pre_1.length();
        int _minus = (_length - 1);
        String _substring = _pre.substring(1, _minus);
        this.xhtmlUtil.operator_add(tag, _substring);
        EList<XmlContents> _contents = xml.getContents();
        for (final XmlContents content : _contents) {
          {
            this.generateXml(content, piAnswerHandler);
            String _post = content.getPost();
            String _post_1 = content.getPost();
            int _length_1 = _post_1.length();
            int _minus_1 = (_length_1 - 1);
            _post.substring(1, _minus_1);
          }
        }
      }
      _xblockexpression = tag;
    }
    return _xblockexpression;
  }
  
  protected EObject _generateXml(final XmlContents xml, final Function1<? super XmlPIAnswerElement, ? extends EObject> piAnswerHandler) {
    EObject _xifexpression = null;
    XmlElement _element = xml.getElement();
    boolean _notEquals = (!Objects.equal(_element, null));
    if (_notEquals) {
      EObject _xblockexpression = null;
      {
        XmlElement _element_1 = xml.getElement();
        final EObject tag = this.generateXml(_element_1, piAnswerHandler);
        _xblockexpression = tag;
      }
      _xifexpression = _xblockexpression;
    }
    return _xifexpression;
  }
  
  protected EObject _generateXml(final XmlPIAnswerElement xml, final Function1<? super XmlPIAnswerElement, ? extends EObject> piAnswerHandler) {
    return piAnswerHandler.apply(xml);
  }
  
  protected EObject _generateInput(final XmlAnswer answer) {
    Xml _xml = answer.getXml();
    final Function1<XmlPIAnswerElement, EObject> _function = new Function1<XmlPIAnswerElement, EObject>() {
      @Override
      public EObject apply(final XmlPIAnswerElement piAnswer) {
        SimpleAnswer<?> _answer = piAnswer.getAnswer();
        return Quiz2XhtmlGenerator.this.generateInput(_answer);
      }
    };
    return this.generateXml(_xml, _function);
  }
  
  protected String _generateCheckFunction(final XmlAnswer answer) {
    String _xblockexpression = null;
    {
      final ArrayList<XmlPIAnswerElement> piAnswers = CollectionLiterals.<XmlPIAnswerElement>newArrayList();
      TreeIterator<EObject> _eAllContents = answer.eAllContents();
      Iterator<XmlPIAnswerElement> _filter = Iterators.<XmlPIAnswerElement>filter(_eAllContents, XmlPIAnswerElement.class);
      Iterators.<XmlPIAnswerElement>addAll(piAnswers, _filter);
      for (final XmlPIAnswerElement piAnswer : piAnswers) {
        SimpleAnswer<?> _answer = piAnswer.getAnswer();
        this.generateCheckFunction(_answer);
      }
      StringConcatenation _builder = new StringConcatenation();
      String _checkFunctionHead = this.checkFunctionHead(answer);
      _builder.append(_checkFunctionHead, "");
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("return [");
      {
        boolean _hasElements = false;
        for(final XmlPIAnswerElement piAnswer_1 : piAnswers) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(", ", "\t");
          }
          SimpleAnswer<?> _answer_1 = piAnswer_1.getAnswer();
          String _checkFunctionName = this.checkFunctionName(_answer_1);
          _builder.append(_checkFunctionName, "\t");
          _builder.append("()");
        }
      }
      _builder.append("];");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  public EObject generateOptionsElement(final OptionsAnswer answer, final InputType type) {
    DivType _xblockexpression = null;
    {
      final String name = this.name(answer);
      DivType _createDivType = this.xhtml1Factory.createDivType();
      final Procedure1<DivType> _function = new Procedure1<DivType>() {
        @Override
        public void apply(final DivType it) {
          it.setId(name);
          EList<Option> _options = answer.getOptions();
          for (final Option option : _options) {
            {
              String _xifexpression = null;
              OptionAnswer _option = option.getOption();
              if ((_option instanceof SimpleAnswer<?>)) {
                OptionAnswer _option_1 = option.getOption();
                _xifexpression = Quiz2XhtmlGenerator.this.generateOutputValue(((SimpleAnswer<?>) _option_1));
              }
              final String value = _xifexpression;
              Quiz2XhtmlGenerator.this.appendInputType(it, type, name, value, name);
              BrType _createBrType = Quiz2XhtmlGenerator.this.xhtml1Factory.createBrType();
              Quiz2XhtmlGenerator.this.xhtmlUtil.operator_add(it, _createBrType);
            }
          }
        }
      };
      _xblockexpression = ObjectExtensions.<DivType>operator_doubleArrow(_createDivType, _function);
    }
    return _xblockexpression;
  }
  
  protected EObject _generateInput(final SingleOptionsAnswer answer) {
    return this.generateOptionsElement(answer, InputType.RADIO);
  }
  
  protected EObject _generateInput(final ManyOptionsAnswer answer) {
    return this.generateOptionsElement(answer, InputType.CHECKBOX);
  }
  
  protected String _generateCheckFunction(final OptionsAnswer answer) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      String _checkFunctionHead = this.checkFunctionHead(answer);
      _builder.append(_checkFunctionHead, "");
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("var input = getInputElement(\'");
      String _name = this.name(answer);
      _builder.append(_name, "\t");
      _builder.append("\');");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("var inputs = input.getElementsByTagName(\"input\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return [input");
      final StringBuilder stringBuilder = new StringBuilder(_builder);
      int i = 0;
      EList<Option> _options = answer.getOptions();
      for (final Option option : _options) {
        {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(", inputs[");
          _builder_1.append(i, "");
          _builder_1.append("].checked === ");
          boolean _isCorrect = option.isCorrect();
          _builder_1.append(_isCorrect, "");
          stringBuilder.append(_builder_1);
          i = (i + 1);
        }
      }
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("];");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      stringBuilder.append(_builder_1);
      _xblockexpression = stringBuilder.toString();
    }
    return _xblockexpression;
  }
  
  protected Iterable<? extends EObject> _generate(final Option option) {
    OptionAnswer _option = option.getOption();
    return this.generate(_option);
  }
  
  protected String _generateOutputValue(final StringAnswer answer) {
    return answer.getValue();
  }
  
  protected String _generateOutputValue(final NumberAnswer answer) {
    Double _value = answer.getValue();
    return String.valueOf(_value);
  }
  
  protected String _generateOutputValue(final BooleanAnswer answer) {
    String _xifexpression = null;
    Boolean _value = answer.getValue();
    if ((_value).booleanValue()) {
      _xifexpression = "yes";
    } else {
      _xifexpression = "no";
    }
    return _xifexpression;
  }
  
  protected EObject _generateOutput(final XmlAnswer answer) {
    Xml _xml = answer.getXml();
    final Function1<XmlPIAnswerElement, EObject> _function = new Function1<XmlPIAnswerElement, EObject>() {
      @Override
      public EObject apply(final XmlPIAnswerElement piAnswer) {
        SimpleAnswer<?> _answer = piAnswer.getAnswer();
        return Quiz2XhtmlGenerator.this.generateOutput(_answer);
      }
    };
    return this.generateXml(_xml, _function);
  }
  
  protected EObject _generateOutput(final Xml xml) {
    final Function1<XmlPIAnswerElement, EObject> _function = new Function1<XmlPIAnswerElement, EObject>() {
      @Override
      public EObject apply(final XmlPIAnswerElement piAnswer) {
        SimpleAnswer<?> _answer = piAnswer.getAnswer();
        return Quiz2XhtmlGenerator.this.generateOutput(_answer);
      }
    };
    return this.generateXml(xml, _function);
  }
  
  public String checkFunctionName(final Answer answer) {
    String _name = this.name(answer);
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    return ("check" + _firstUpper);
  }
  
  public String checkFunctionHead(final Answer answer) {
    String _checkFunctionName = this.checkFunctionName(answer);
    String _plus = ("function " + _checkFunctionName);
    return (_plus + "()");
  }
  
  public String name(final EObject o, final String prefix) {
    EObject _eContainer = o.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    int _indexOf = _eContents.indexOf(o);
    return (prefix + Integer.valueOf(_indexOf));
  }
  
  public String name(final AbstractQA qa) {
    String _xblockexpression = null;
    {
      String _elvis = null;
      String _switchResult = null;
      boolean _matched = false;
      if (!_matched) {
        if (qa instanceof QARef) {
          _matched=true;
          QA _qaRef = ((QARef)qa).getQaRef();
          _switchResult = _qaRef.getName();
        }
      }
      if (!_matched) {
        if (qa instanceof QA) {
          _matched=true;
          _switchResult = ((QA)qa).getName();
        }
      }
      if (_switchResult != null) {
        _elvis = _switchResult;
      } else {
        String _name = this.name(qa, "_q_");
        _elvis = _name;
      }
      final String qaName = _elvis;
      QuizPart _ancestor = Quiz2XhtmlGenerator.<QuizPart>ancestor(qa, QuizPart.class);
      String _name_1 = _ancestor.getName();
      String _plus = (_name_1 + "_");
      _xblockexpression = (_plus + qaName);
    }
    return _xblockexpression;
  }
  
  public String name(final Answer answer) {
    String _xblockexpression = null;
    {
      QA _ancestor = Quiz2XhtmlGenerator.<QA>ancestor(answer, QA.class);
      final String name = this.name(_ancestor);
      String _xifexpression = null;
      XmlPIAnswerElement _ancestor_1 = Quiz2XhtmlGenerator.<XmlPIAnswerElement>ancestor(answer, XmlPIAnswerElement.class);
      boolean _notEquals = (!Objects.equal(_ancestor_1, null));
      if (_notEquals) {
        String _relativeName = this.<QA>relativeName(answer, QA.class);
        _xifexpression = (name + _relativeName);
      } else {
        _xifexpression = name;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public <T extends Object> String relativeName(final EObject eObject, final Class<T> c) {
    String name = "";
    EObject e = eObject;
    while ((!Objects.equal(e, null))) {
      {
        final EObject child = e;
        EObject _eContainer = e.eContainer();
        e = _eContainer;
        String childName = null;
        EClass _eClass = child.eClass();
        final EStructuralFeature nameFeature = _eClass.getEStructuralFeature("name");
        boolean _notEquals = (!Objects.equal(nameFeature, null));
        if (_notEquals) {
          Object _eGet = child.eGet(nameFeature);
          childName = ((String) _eGet);
        }
        boolean _equals = Objects.equal(childName, null);
        if (_equals) {
          final EStructuralFeature feature = child.eContainingFeature();
          boolean _and = false;
          boolean _notEquals_1 = (!Objects.equal(feature, null));
          if (!_notEquals_1) {
            _and = false;
          } else {
            boolean _notEquals_2 = (!Objects.equal(e, null));
            _and = _notEquals_2;
          }
          if (_and) {
            String _name = feature.getName();
            Object _xifexpression = null;
            boolean _isMany = feature.isMany();
            if (_isMany) {
              Object _eGet_1 = e.eGet(feature);
              _xifexpression = Integer.valueOf(((EList<?>) _eGet_1).indexOf(child));
            } else {
              _xifexpression = "";
            }
            String _plus = (_name + ((Comparable<?>)_xifexpression));
            childName = _plus;
          }
        }
        boolean _notEquals_3 = (!Objects.equal(childName, null));
        if (_notEquals_3) {
          name = (("_" + childName) + name);
        }
        boolean _isInstance = c.isInstance(child);
        if (_isInstance) {
          return name;
        }
      }
    }
    return null;
  }
  
  public static <T extends Object> T ancestor(final EObject eObject, final Class<T> c) {
    Object _xblockexpression = null;
    {
      EObject e = eObject;
      while ((!Objects.equal(e, null))) {
        {
          boolean _isInstance = c.isInstance(e);
          if (_isInstance) {
            return ((T) e);
          }
          EObject _eContainer = e.eContainer();
          e = _eContainer;
        }
      }
      _xblockexpression = null;
    }
    return ((T)_xblockexpression);
  }
  
  public Iterable<? extends EObject> generate(final EObject qa) {
    if (qa instanceof QA) {
      return _generate((QA)qa);
    } else if (qa instanceof QARef) {
      return _generate((QARef)qa);
    } else if (qa instanceof QuizPart) {
      return _generate((QuizPart)qa);
    } else if (qa instanceof QuizPartRef) {
      return _generate((QuizPartRef)qa);
    } else if (qa instanceof Option) {
      return _generate((Option)qa);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(qa).toString());
    }
  }
  
  public String generateCheckFunction(final EObject answer) {
    if (answer instanceof BooleanAnswer) {
      return _generateCheckFunction((BooleanAnswer)answer);
    } else if (answer instanceof NumberAnswer) {
      return _generateCheckFunction((NumberAnswer)answer);
    } else if (answer instanceof StringAnswer) {
      return _generateCheckFunction((StringAnswer)answer);
    } else if (answer instanceof XmlAnswer) {
      return _generateCheckFunction((XmlAnswer)answer);
    } else if (answer instanceof OptionsAnswer) {
      return _generateCheckFunction((OptionsAnswer)answer);
    } else if (answer instanceof QA) {
      return _generateCheckFunction((QA)answer);
    } else if (answer instanceof QARef) {
      return _generateCheckFunction((QARef)answer);
    } else if (answer instanceof QuizPart) {
      return _generateCheckFunction((QuizPart)answer);
    } else if (answer instanceof QuizPartRef) {
      return _generateCheckFunction((QuizPartRef)answer);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer).toString());
    }
  }
  
  public EObject generateOutput(final EObject answer) {
    if (answer instanceof XmlAnswer) {
      return _generateOutput((XmlAnswer)answer);
    } else if (answer instanceof StringQuestion) {
      return _generateOutput((StringQuestion)answer);
    } else if (answer instanceof XmlQuestion) {
      return _generateOutput((XmlQuestion)answer);
    } else if (answer instanceof Xml) {
      return _generateOutput((Xml)answer);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer).toString());
    }
  }
  
  public EObject generateInput(final Answer answer) {
    if (answer instanceof BooleanAnswer) {
      return _generateInput((BooleanAnswer)answer);
    } else if (answer instanceof NumberAnswer) {
      return _generateInput((NumberAnswer)answer);
    } else if (answer instanceof StringAnswer) {
      return _generateInput((StringAnswer)answer);
    } else if (answer instanceof ManyOptionsAnswer) {
      return _generateInput((ManyOptionsAnswer)answer);
    } else if (answer instanceof SingleOptionsAnswer) {
      return _generateInput((SingleOptionsAnswer)answer);
    } else if (answer instanceof XmlAnswer) {
      return _generateInput((XmlAnswer)answer);
    } else if (answer != null) {
      return _generateInput(answer);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer).toString());
    }
  }
  
  public EObject generateXml(final EObject xml, final Function1<? super XmlPIAnswerElement, ? extends EObject> piAnswerHandler) {
    if (xml instanceof XmlPIAnswerElement
         && piAnswerHandler != null) {
      return _generateXml((XmlPIAnswerElement)xml, piAnswerHandler);
    } else if (xml instanceof XmlTagElement
         && piAnswerHandler != null) {
      return _generateXml((XmlTagElement)xml, piAnswerHandler);
    } else if (xml instanceof Xml
         && piAnswerHandler != null) {
      return _generateXml((Xml)xml, piAnswerHandler);
    } else if (xml instanceof XmlContents
         && piAnswerHandler != null) {
      return _generateXml((XmlContents)xml, piAnswerHandler);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(xml, piAnswerHandler).toString());
    }
  }
  
  public String generateOutputValue(final SimpleAnswer<?> answer) {
    if (answer instanceof BooleanAnswer) {
      return _generateOutputValue((BooleanAnswer)answer);
    } else if (answer instanceof NumberAnswer) {
      return _generateOutputValue((NumberAnswer)answer);
    } else if (answer instanceof StringAnswer) {
      return _generateOutputValue((StringAnswer)answer);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer).toString());
    }
  }
}
