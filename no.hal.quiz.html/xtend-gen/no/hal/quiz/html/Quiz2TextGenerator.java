/**
 * generated by Xtext
 */
package no.hal.quiz.html;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.function.Consumer;
import no.hal.quiz.AbstractQA;
import no.hal.quiz.AbstractQuizPart;
import no.hal.quiz.Answer;
import no.hal.quiz.BooleanAnswer;
import no.hal.quiz.ManyOptionsAnswer;
import no.hal.quiz.NumberAnswer;
import no.hal.quiz.Option;
import no.hal.quiz.OptionAnswer;
import no.hal.quiz.OptionsAnswer;
import no.hal.quiz.QA;
import no.hal.quiz.QARef;
import no.hal.quiz.Question;
import no.hal.quiz.Quiz;
import no.hal.quiz.QuizPart;
import no.hal.quiz.QuizPartRef;
import no.hal.quiz.SimpleAnswer;
import no.hal.quiz.SingleOptionsAnswer;
import no.hal.quiz.StringAnswer;
import no.hal.quiz.StringQuestion;
import no.hal.quiz.Xml;
import no.hal.quiz.XmlAnswer;
import no.hal.quiz.XmlAttribute;
import no.hal.quiz.XmlContents;
import no.hal.quiz.XmlElement;
import no.hal.quiz.XmlPIAnswerElement;
import no.hal.quiz.XmlQuestion;
import no.hal.quiz.XmlTag;
import no.hal.quiz.XmlTagElement;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class Quiz2TextGenerator {
  public String generateHtml(final Quiz quiz) {
    StringBuilder _stringBuilder = new StringBuilder();
    CharSequence _generateHtml = this.generateHtml(quiz, _stringBuilder);
    return _generateHtml.toString();
  }
  
  public String generateHtml(final Iterable<AbstractQuizPart> quizParts) {
    String _xblockexpression = null;
    {
      final StringBuilder builder = new StringBuilder();
      this.generatePreHtml("Quiz", builder);
      for (final AbstractQuizPart quizPart : quizParts) {
        if ((quizPart instanceof QuizPartRef)) {
          QuizPart _partRef = ((QuizPartRef) quizPart).getPartRef();
          this.generate(_partRef, builder);
        } else {
          if ((quizPart instanceof QuizPart)) {
            this.generate(((QuizPart) quizPart), builder);
          }
        }
      }
      this.generatePostHtml(builder);
      _xblockexpression = builder.toString();
    }
    return _xblockexpression;
  }
  
  public String generateHtml(final QuizPart quizPart) {
    String _xblockexpression = null;
    {
      final StringBuilder builder = new StringBuilder();
      String _elvis = null;
      String _title = quizPart.getTitle();
      if (_title != null) {
        _elvis = _title;
      } else {
        String _name = quizPart.getName();
        _elvis = _name;
      }
      this.generatePreHtml(_elvis, builder);
      this.generate(quizPart, builder);
      this.generatePostHtml(builder);
      _xblockexpression = builder.toString();
    }
    return _xblockexpression;
  }
  
  public CharSequence generatePreHtml(final String title, final StringBuilder stringBuilder) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<title>");
    _builder.append(title, "\t");
    _builder.append("</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<meta charset=\"utf-8\"/>");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    return Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
  }
  
  public CharSequence generatePostHtml(final StringBuilder stringBuilder) {
    return Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "</body></html>\n");
  }
  
  public CharSequence generateHtml(final Quiz quiz, final StringBuilder stringBuilder) {
    CharSequence _xblockexpression = null;
    {
      String _elvis = null;
      String _title = quiz.getTitle();
      if (_title != null) {
        _elvis = _title;
      } else {
        String _name = quiz.getName();
        _elvis = _name;
      }
      this.generatePreHtml(_elvis, stringBuilder);
      EList<AbstractQuizPart> _parts = quiz.getParts();
      final Consumer<AbstractQuizPart> _function = new Consumer<AbstractQuizPart>() {
        @Override
        public void accept(final AbstractQuizPart it) {
          Quiz2TextGenerator.this.generate(it, stringBuilder);
        }
      };
      _parts.forEach(_function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<script type=\"text/javascript\">");
      _builder.newLine();
      _builder.append("function isArray(o) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return o.length !== undefined;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function getInputElement(name) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return document.getElementById(name);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function hasModifier(s, mod) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return s.indexOf(mod) >= 0;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function checkInputEquals(input, prop, value, modifiers) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if (typeof input === \'string\') {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("input = getInputElement(input);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var inputValue = input[prop];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if (hasModifier(modifiers, \'_\')) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("inputValue = inputValue.toLowerCase();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var matches = (inputValue == value);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if (hasModifier(modifiers, \'~\')) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var regexpObject = new RegExp(value, \"\");");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("matches = regexpObject.test(inputValue);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return [input, matches];");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function validatedInput(result) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var input = result[0];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if (isArray(input)) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (var i = 0; i < result.length; i++) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("validatedInput(result[i]);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var valid = true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for (var i = 1; i < result.length; i++) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (! result[i]) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("valid = false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var color = \"YellowGreen\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if (! valid) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("color = \"Red\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("input.style.backgroundColor = color;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
      EList<AbstractQuizPart> _parts_1 = quiz.getParts();
      final Consumer<AbstractQuizPart> _function_1 = new Consumer<AbstractQuizPart>() {
        @Override
        public void accept(final AbstractQuizPart it) {
          Quiz2TextGenerator.this.generateCheckFunction(it, stringBuilder);
        }
      };
      _parts_1.forEach(_function_1);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("</script>");
      _builder_1.newLine();
      Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_1);
      _xblockexpression = this.generatePostHtml(stringBuilder);
    }
    return _xblockexpression;
  }
  
  protected void _generate(final QuizPartRef quizPartRef, final StringBuilder stringBuilder) {
    QuizPart _partRef = quizPartRef.getPartRef();
    this.generate(_partRef, stringBuilder);
  }
  
  protected void _generate(final QuizPart quizPart, final StringBuilder stringBuilder) {
    StringBuilder _doubleLessThan = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "<hr/><h2>");
    String _title = quizPart.getTitle();
    StringBuilder _doubleLessThan_1 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, _title);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_1, "</h2>\n");
    StringBuilder _doubleLessThan_2 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "<form id=\'");
    String _name = quizPart.getName();
    StringBuilder _doubleLessThan_3 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_2, _name);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_3, "\'>\n");
    EList<AbstractQA> _questions = quizPart.getQuestions();
    final Consumer<AbstractQA> _function = new Consumer<AbstractQA>() {
      @Override
      public void accept(final AbstractQA it) {
        Quiz2TextGenerator.this.generate(it, stringBuilder);
      }
    };
    _questions.forEach(_function);
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "</form>\n");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p/><button onclick=\'check");
    String _name_1 = quizPart.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("()\'>Check ");
    String _title_1 = quizPart.getTitle();
    _builder.append(_title_1, "");
    _builder.append("</button>");
    StringBuilder _doubleLessThan_4 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_4, "\n");
  }
  
  protected void _generateCheckFunction(final QuizPartRef quizPartRef, final StringBuilder stringBuilder) {
    QuizPart _partRef = quizPartRef.getPartRef();
    this.generateCheckFunction(_partRef, stringBuilder);
  }
  
  protected void _generateCheckFunction(final QuizPart quizPart, final StringBuilder stringBuilder) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function check");
    String _name = quizPart.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    {
      EList<AbstractQA> _questions = quizPart.getQuestions();
      for(final AbstractQA qa : _questions) {
        _builder.append("\t");
        _builder.append("validatedInput(check");
        String _name_1 = this.name(qa);
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        _builder.append(_firstUpper_1, "\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
    EList<AbstractQA> _questions_1 = quizPart.getQuestions();
    final Consumer<AbstractQA> _function = new Consumer<AbstractQA>() {
      @Override
      public void accept(final AbstractQA it) {
        Quiz2TextGenerator.this.generateCheckFunction(it, stringBuilder);
      }
    };
    _questions_1.forEach(_function);
  }
  
  protected void _generate(final QARef qaRef, final StringBuilder stringBuilder) {
    QA _qaRef = qaRef.getQaRef();
    this.generate(_qaRef, stringBuilder);
  }
  
  protected void _generateCheckFunction(final QARef qaRef, final StringBuilder stringBuilder) {
    QA _qaRef = qaRef.getQaRef();
    this.generateCheckFunction(_qaRef, stringBuilder);
  }
  
  protected void _generate(final QA qa, final StringBuilder stringBuilder) {
    Question _q = qa.getQ();
    this.operator_doubleLessThan(stringBuilder, _q);
    Answer _a = qa.getA();
    this.generateInput(_a, stringBuilder);
  }
  
  protected void _generateCheckFunction(final QA qa, final StringBuilder stringBuilder) {
    Answer _a = qa.getA();
    this.generateCheckFunction(_a, stringBuilder);
  }
  
  protected void _generateOutput(final StringQuestion sq, final StringBuilder stringBuilder) {
    StringBuilder _doubleLessThan = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "\t<p>");
    String _question = sq.getQuestion();
    StringBuilder _doubleLessThan_1 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, _question);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_1, "</p>\n");
  }
  
  protected void _generateOutput(final XmlQuestion xq, final StringBuilder stringBuilder) {
    Xml _xml = xq.getXml();
    StringBuilder _doubleLessThan = this.operator_doubleLessThan(stringBuilder, _xml);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, "\n");
  }
  
  protected void _generateInput(final Answer answer, final StringBuilder stringBuilder) {
  }
  
  public void generateInputElement(final Answer answer, final String type, final StringBuilder stringBuilder) {
    final String name = this.name(answer);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("<input type=\'");
    _builder.append(type, "\t");
    _builder.append("\' id=\'");
    _builder.append(name, "\t");
    _builder.append("\' name=\'");
    _builder.append(name, "\t");
    _builder.append("\'/>");
    StringBuilder _doubleLessThan = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, "\n");
  }
  
  protected void _generateInput(final StringAnswer answer, final StringBuilder stringBuilder) {
    this.generateInputElement(answer, "text", stringBuilder);
  }
  
  protected void _generateCheckFunction(final StringAnswer answer, final StringBuilder stringBuilder) {
    String _xifexpression = null;
    boolean _isRegexp = answer.isRegexp();
    if (_isRegexp) {
      _xifexpression = "~";
    } else {
      _xifexpression = "";
    }
    String _xifexpression_1 = null;
    boolean _isIgnoreCase = answer.isIgnoreCase();
    if (_isIgnoreCase) {
      _xifexpression_1 = "_";
    } else {
      _xifexpression_1 = "";
    }
    final String modifiers = (_xifexpression + _xifexpression_1);
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return checkInputEquals(\'");
    String _name = this.name(answer);
    _builder.append(_name, "\t");
    _builder.append("\', \'value\', \'");
    String _value = answer.getValue();
    _builder.append(_value, "\t");
    _builder.append("\', \'");
    _builder.append(modifiers, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
  }
  
  protected void _generateInput(final NumberAnswer answer, final StringBuilder stringBuilder) {
    this.generateInputElement(answer, "text", stringBuilder);
  }
  
  protected void _generateCheckFunction(final NumberAnswer answer, final StringBuilder stringBuilder) {
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return checkInputEquals(\'");
    String _name = this.name(answer);
    _builder.append(_name, "\t");
    _builder.append("\', \'value\', \'");
    Double _value = answer.getValue();
    _builder.append(_value, "\t");
    _builder.append("\', \'\');");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
  }
  
  protected void _generateInput(final BooleanAnswer answer, final StringBuilder stringBuilder) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div id=\"");
    String _name = this.name(answer);
    _builder.append(_name, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<input type=\"radio\" name=\"radio\">Yes</input>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<input type=\"radio\" name=\"radio\">No</input>");
    _builder.newLine();
    _builder.append("</div>");
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
  }
  
  protected void _generateCheckFunction(final BooleanAnswer answer, final StringBuilder stringBuilder) {
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var input = getInputElement(\'");
    String _name = this.name(answer);
    _builder.append(_name, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return [input, input.getElementsByTagName(\"input\")[");
    int _xifexpression = (int) 0;
    Boolean _value = answer.getValue();
    boolean _equals = Objects.equal(Boolean.TRUE, _value);
    if (_equals) {
      _xifexpression = 0;
    } else {
      _xifexpression = 1;
    }
    _builder.append(_xifexpression, "\t");
    _builder.append("].checked];");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
  }
  
  protected void _generateXml(final Xml xml, final StringBuilder stringBuilder, final Procedure2<? super XmlPIAnswerElement, ? super StringBuilder> piAnswerHandler) {
    XmlElement _element = xml.getElement();
    this.generateXml(_element, stringBuilder, piAnswerHandler);
  }
  
  protected void _generateXml(final XmlTagElement xml, final StringBuilder stringBuilder, final Procedure2<? super XmlPIAnswerElement, ? super StringBuilder> piAnswerHandler) {
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "<");
    XmlTag _startTag = xml.getStartTag();
    String _name = _startTag.getName();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _name);
    XmlTag _startTag_1 = xml.getStartTag();
    EList<XmlAttribute> _attributes = _startTag_1.getAttributes();
    for (final XmlAttribute attribute : _attributes) {
      StringBuilder _doubleLessThan = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, " ");
      String _name_1 = attribute.getName();
      StringBuilder _doubleLessThan_1 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, _name_1);
      String _value = attribute.getValue();
      String _plus = (" \"" + _value);
      StringBuilder _doubleLessThan_2 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_1, _plus);
      Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_2, "\"");
    }
    String _endTag = xml.getEndTag();
    boolean _notEquals = (!Objects.equal(_endTag, null));
    if (_notEquals) {
      StringBuilder _doubleLessThan_3 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, ">");
      String _pre = xml.getPre();
      String _pre_1 = xml.getPre();
      int _length = _pre_1.length();
      int _minus = (_length - 1);
      String _substring = _pre.substring(1, _minus);
      Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_3, _substring);
      EList<XmlContents> _contents = xml.getContents();
      for (final XmlContents content : _contents) {
        this.generateXml(content, stringBuilder, piAnswerHandler);
      }
      StringBuilder _doubleLessThan_4 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "<");
      String _endTag_1 = xml.getEndTag();
      StringBuilder _doubleLessThan_5 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_4, _endTag_1);
      Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_5, "/");
    } else {
      Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "/");
    }
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, ">");
  }
  
  protected void _generateXml(final XmlContents xml, final StringBuilder stringBuilder, final Procedure2<? super XmlPIAnswerElement, ? super StringBuilder> piAnswerHandler) {
    XmlElement _element = xml.getElement();
    boolean _notEquals = (!Objects.equal(_element, null));
    if (_notEquals) {
      XmlElement _element_1 = xml.getElement();
      this.generateXml(_element_1, stringBuilder, piAnswerHandler);
      String _post = xml.getPost();
      String _post_1 = xml.getPost();
      int _length = _post_1.length();
      int _minus = (_length - 1);
      String _substring = _post.substring(1, _minus);
      Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _substring);
    }
  }
  
  protected void _generateXml(final XmlPIAnswerElement xml, final StringBuilder stringBuilder, final Procedure2<? super XmlPIAnswerElement, ? super StringBuilder> piAnswerHandler) {
    piAnswerHandler.apply(xml, stringBuilder);
  }
  
  protected void _generateInput(final XmlAnswer answer, final StringBuilder stringBuilder) {
    Xml _xml = answer.getXml();
    final Procedure2<XmlPIAnswerElement, StringBuilder> _function = new Procedure2<XmlPIAnswerElement, StringBuilder>() {
      @Override
      public void apply(final XmlPIAnswerElement piAnswer, final StringBuilder sb) {
        SimpleAnswer<?> _answer = piAnswer.getAnswer();
        Quiz2TextGenerator.this.generateInput(_answer, stringBuilder);
      }
    };
    this.generateXml(_xml, stringBuilder, _function);
  }
  
  protected void _generateCheckFunction(final XmlAnswer answer, final StringBuilder stringBuilder) {
    final ArrayList<XmlPIAnswerElement> piAnswers = CollectionLiterals.<XmlPIAnswerElement>newArrayList();
    TreeIterator<EObject> _eAllContents = answer.eAllContents();
    Iterator<XmlPIAnswerElement> _filter = Iterators.<XmlPIAnswerElement>filter(_eAllContents, XmlPIAnswerElement.class);
    Iterators.<XmlPIAnswerElement>addAll(piAnswers, _filter);
    for (final XmlPIAnswerElement piAnswer : piAnswers) {
      SimpleAnswer<?> _answer = piAnswer.getAnswer();
      this.generateCheckFunction(_answer, stringBuilder);
    }
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return [");
    {
      boolean _hasElements = false;
      for(final XmlPIAnswerElement piAnswer_1 : piAnswers) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        SimpleAnswer<?> _answer_1 = piAnswer_1.getAnswer();
        String _checkFunctionName = this.checkFunctionName(_answer_1);
        _builder.append(_checkFunctionName, "\t");
        _builder.append("()");
      }
    }
    _builder.append("];");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
  }
  
  public void generateOptionsElement(final OptionsAnswer answer, final StringBuilder stringBuilder, final String outerTag, final String innerTag, final String innerAttr, final String... extraOptions) {
    final String name = this.name(answer);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("<div id=\"");
    _builder.append(name, "\t");
    _builder.append("\">");
    StringBuilder _doubleLessThan = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, "\n");
    boolean _notEquals = (!Objects.equal(outerTag, null));
    if (_notEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\t");
      _builder_1.append("<");
      _builder_1.append(outerTag, "\t");
      _builder_1.append(">");
      StringBuilder _doubleLessThan_1 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_1);
      Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_1, "\n");
    }
    for (final String option : extraOptions) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("\t");
      _builder_2.append("<");
      _builder_2.append(innerTag, "\t");
      _builder_2.append(" ");
      String _elvis = null;
      if (innerAttr != null) {
        _elvis = innerAttr;
      } else {
        _elvis = "";
      }
      _builder_2.append(_elvis, "\t");
      _builder_2.append(">");
      _builder_2.append(option, "\t");
      _builder_2.append("</");
      _builder_2.append(innerTag, "\t");
      _builder_2.append(">");
      StringBuilder _doubleLessThan_2 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_2);
      Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_2, "<br/>\n");
    }
    EList<Option> _options = answer.getOptions();
    for (final Option option_1 : _options) {
      {
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append("\t");
        _builder_3.append("<");
        _builder_3.append(innerTag, "\t");
        _builder_3.append(" ");
        String _elvis_1 = null;
        if (innerAttr != null) {
          _elvis_1 = innerAttr;
        } else {
          _elvis_1 = "";
        }
        _builder_3.append(_elvis_1, "\t");
        _builder_3.append(" name=\'");
        _builder_3.append(name, "\t");
        _builder_3.append("\'>");
        Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_3);
        this.generate(option_1, stringBuilder);
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("\t");
        _builder_4.append("</");
        _builder_4.append(innerTag, "\t");
        _builder_4.append(">");
        StringBuilder _doubleLessThan_3 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_4);
        Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_3, "<br/>\n");
      }
    }
    boolean _notEquals_1 = (!Objects.equal(outerTag, null));
    if (_notEquals_1) {
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("\t");
      _builder_3.append("</");
      _builder_3.append(outerTag, "\t");
      _builder_3.append(">");
      StringBuilder _doubleLessThan_3 = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_3);
      Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_3, "\n");
    }
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("\t");
    _builder_4.append("</div>");
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_4);
  }
  
  protected void _generateInput(final SingleOptionsAnswer answer, final StringBuilder stringBuilder) {
    this.generateOptionsElement(answer, stringBuilder, null, "input", "type=\'radio\'");
  }
  
  protected void _generateInput(final ManyOptionsAnswer answer, final StringBuilder stringBuilder) {
    this.generateOptionsElement(answer, stringBuilder, null, "input", "type=\'checkbox\'");
  }
  
  protected void _generateCheckFunction(final OptionsAnswer answer, final StringBuilder stringBuilder) {
    StringConcatenation _builder = new StringConcatenation();
    String _checkFunctionHead = this.checkFunctionHead(answer);
    _builder.append(_checkFunctionHead, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var input = getInputElement(\'");
    String _name = this.name(answer);
    _builder.append(_name, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var inputs = input.getElementsByTagName(\"input\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return [input");
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder);
    int i = 0;
    EList<Option> _options = answer.getOptions();
    for (final Option option : _options) {
      {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(", inputs[");
        _builder_1.append(i, "");
        _builder_1.append("].checked === ");
        boolean _isCorrect = option.isCorrect();
        _builder_1.append(_isCorrect, "");
        Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_1);
        i = (i + 1);
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("];");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _builder_1);
  }
  
  protected void _generate(final Option option, final StringBuilder stringBuilder) {
    OptionAnswer _option = option.getOption();
    this.operator_doubleLessThan(stringBuilder, _option);
  }
  
  protected void _generateOutput(final StringAnswer answer, final StringBuilder stringBuilder) {
    String _value = answer.getValue();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _value);
  }
  
  protected void _generateOutput(final NumberAnswer answer, final StringBuilder stringBuilder) {
    Double _value = answer.getValue();
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _value);
  }
  
  protected void _generateOutput(final BooleanAnswer answer, final StringBuilder stringBuilder) {
    String _xifexpression = null;
    Boolean _value = answer.getValue();
    if ((_value).booleanValue()) {
      _xifexpression = "yes";
    } else {
      _xifexpression = "no";
    }
    Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, _xifexpression);
  }
  
  protected void _generateOutput(final XmlAnswer answer, final StringBuilder stringBuilder) {
    Xml _xml = answer.getXml();
    this.operator_doubleLessThan(stringBuilder, _xml);
  }
  
  protected void _generateOutput(final Xml xml, final StringBuilder stringBuilder) {
    StringBuilder _doubleLessThan = Quiz2TextGenerator.operator_doubleLessThan(stringBuilder, "<");
    XmlElement _element = xml.getElement();
    String _string = _element.toString();
    StringBuilder _doubleLessThan_1 = Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan, _string);
    Quiz2TextGenerator.operator_doubleLessThan(_doubleLessThan_1, ">");
  }
  
  public String checkFunctionName(final Answer answer) {
    String _name = this.name(answer);
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    return ("check" + _firstUpper);
  }
  
  public String checkFunctionHead(final Answer answer) {
    String _checkFunctionName = this.checkFunctionName(answer);
    String _plus = ("function " + _checkFunctionName);
    return (_plus + "()");
  }
  
  public StringBuilder operator_doubleLessThan(final StringBuilder stringBuilder, final EObject eObject) {
    this.generateOutput(eObject, stringBuilder);
    return stringBuilder;
  }
  
  public static StringBuilder operator_doubleLessThan(final StringBuilder stringBuilder, final Object o) {
    return stringBuilder.append(o);
  }
  
  public String name(final EObject o, final String prefix) {
    EObject _eContainer = o.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    int _indexOf = _eContents.indexOf(o);
    return (prefix + Integer.valueOf(_indexOf));
  }
  
  public String name(final AbstractQA qa) {
    String _xblockexpression = null;
    {
      String _elvis = null;
      String _switchResult = null;
      boolean _matched = false;
      if (!_matched) {
        if (qa instanceof QARef) {
          _matched=true;
          QA _qaRef = ((QARef)qa).getQaRef();
          _switchResult = _qaRef.getName();
        }
      }
      if (!_matched) {
        if (qa instanceof QA) {
          _matched=true;
          _switchResult = ((QA)qa).getName();
        }
      }
      if (_switchResult != null) {
        _elvis = _switchResult;
      } else {
        String _name = this.name(qa, "_q_");
        _elvis = _name;
      }
      final String qaName = _elvis;
      QuizPart _ancestor = Quiz2TextGenerator.<QuizPart>ancestor(qa, QuizPart.class);
      String _name_1 = _ancestor.getName();
      String _plus = (_name_1 + "_");
      _xblockexpression = (_plus + qaName);
    }
    return _xblockexpression;
  }
  
  public String name(final Answer answer) {
    String _xblockexpression = null;
    {
      QA _ancestor = Quiz2TextGenerator.<QA>ancestor(answer, QA.class);
      final String name = this.name(_ancestor);
      String _xifexpression = null;
      XmlPIAnswerElement _ancestor_1 = Quiz2TextGenerator.<XmlPIAnswerElement>ancestor(answer, XmlPIAnswerElement.class);
      boolean _notEquals = (!Objects.equal(_ancestor_1, null));
      if (_notEquals) {
        String _relativeName = this.<QA>relativeName(answer, QA.class);
        _xifexpression = (name + _relativeName);
      } else {
        _xifexpression = name;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public <T extends Object> String relativeName(final EObject eObject, final Class<T> c) {
    String name = "";
    EObject e = eObject;
    while ((!Objects.equal(e, null))) {
      {
        final EObject child = e;
        EObject _eContainer = e.eContainer();
        e = _eContainer;
        String childName = null;
        EClass _eClass = child.eClass();
        final EStructuralFeature nameFeature = _eClass.getEStructuralFeature("name");
        boolean _notEquals = (!Objects.equal(nameFeature, null));
        if (_notEquals) {
          Object _eGet = child.eGet(nameFeature);
          childName = ((String) _eGet);
        }
        boolean _equals = Objects.equal(childName, null);
        if (_equals) {
          final EStructuralFeature feature = child.eContainingFeature();
          boolean _and = false;
          boolean _notEquals_1 = (!Objects.equal(feature, null));
          if (!_notEquals_1) {
            _and = false;
          } else {
            boolean _notEquals_2 = (!Objects.equal(e, null));
            _and = _notEquals_2;
          }
          if (_and) {
            String _name = feature.getName();
            Object _xifexpression = null;
            boolean _isMany = feature.isMany();
            if (_isMany) {
              Object _eGet_1 = e.eGet(feature);
              _xifexpression = Integer.valueOf(((EList<?>) _eGet_1).indexOf(child));
            } else {
              _xifexpression = "";
            }
            String _plus = (_name + ((Comparable<?>)_xifexpression));
            childName = _plus;
          }
        }
        boolean _notEquals_3 = (!Objects.equal(childName, null));
        if (_notEquals_3) {
          name = (("_" + childName) + name);
        }
        boolean _isInstance = c.isInstance(child);
        if (_isInstance) {
          return name;
        }
      }
    }
    return null;
  }
  
  public static <T extends Object> T ancestor(final EObject eObject, final Class<T> c) {
    Object _xblockexpression = null;
    {
      EObject e = eObject;
      while ((!Objects.equal(e, null))) {
        {
          boolean _isInstance = c.isInstance(e);
          if (_isInstance) {
            return ((T) e);
          }
          EObject _eContainer = e.eContainer();
          e = _eContainer;
        }
      }
      _xblockexpression = null;
    }
    return ((T)_xblockexpression);
  }
  
  public void generate(final EObject qa, final StringBuilder stringBuilder) {
    if (qa instanceof QA) {
      _generate((QA)qa, stringBuilder);
      return;
    } else if (qa instanceof QARef) {
      _generate((QARef)qa, stringBuilder);
      return;
    } else if (qa instanceof QuizPart) {
      _generate((QuizPart)qa, stringBuilder);
      return;
    } else if (qa instanceof QuizPartRef) {
      _generate((QuizPartRef)qa, stringBuilder);
      return;
    } else if (qa instanceof Option) {
      _generate((Option)qa, stringBuilder);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(qa, stringBuilder).toString());
    }
  }
  
  public void generateCheckFunction(final EObject answer, final StringBuilder stringBuilder) {
    if (answer instanceof BooleanAnswer) {
      _generateCheckFunction((BooleanAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof NumberAnswer) {
      _generateCheckFunction((NumberAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof StringAnswer) {
      _generateCheckFunction((StringAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof XmlAnswer) {
      _generateCheckFunction((XmlAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof OptionsAnswer) {
      _generateCheckFunction((OptionsAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof QA) {
      _generateCheckFunction((QA)answer, stringBuilder);
      return;
    } else if (answer instanceof QARef) {
      _generateCheckFunction((QARef)answer, stringBuilder);
      return;
    } else if (answer instanceof QuizPart) {
      _generateCheckFunction((QuizPart)answer, stringBuilder);
      return;
    } else if (answer instanceof QuizPartRef) {
      _generateCheckFunction((QuizPartRef)answer, stringBuilder);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer, stringBuilder).toString());
    }
  }
  
  public void generateOutput(final EObject answer, final StringBuilder stringBuilder) {
    if (answer instanceof BooleanAnswer) {
      _generateOutput((BooleanAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof NumberAnswer) {
      _generateOutput((NumberAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof StringAnswer) {
      _generateOutput((StringAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof XmlAnswer) {
      _generateOutput((XmlAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof StringQuestion) {
      _generateOutput((StringQuestion)answer, stringBuilder);
      return;
    } else if (answer instanceof XmlQuestion) {
      _generateOutput((XmlQuestion)answer, stringBuilder);
      return;
    } else if (answer instanceof Xml) {
      _generateOutput((Xml)answer, stringBuilder);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer, stringBuilder).toString());
    }
  }
  
  public void generateInput(final Answer answer, final StringBuilder stringBuilder) {
    if (answer instanceof BooleanAnswer) {
      _generateInput((BooleanAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof NumberAnswer) {
      _generateInput((NumberAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof StringAnswer) {
      _generateInput((StringAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof ManyOptionsAnswer) {
      _generateInput((ManyOptionsAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof SingleOptionsAnswer) {
      _generateInput((SingleOptionsAnswer)answer, stringBuilder);
      return;
    } else if (answer instanceof XmlAnswer) {
      _generateInput((XmlAnswer)answer, stringBuilder);
      return;
    } else if (answer != null) {
      _generateInput(answer, stringBuilder);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(answer, stringBuilder).toString());
    }
  }
  
  public void generateXml(final EObject xml, final StringBuilder stringBuilder, final Procedure2<? super XmlPIAnswerElement, ? super StringBuilder> piAnswerHandler) {
    if (xml instanceof XmlPIAnswerElement
         && piAnswerHandler != null) {
      _generateXml((XmlPIAnswerElement)xml, stringBuilder, piAnswerHandler);
      return;
    } else if (xml instanceof XmlTagElement
         && piAnswerHandler != null) {
      _generateXml((XmlTagElement)xml, stringBuilder, piAnswerHandler);
      return;
    } else if (xml instanceof Xml
         && piAnswerHandler != null) {
      _generateXml((Xml)xml, stringBuilder, piAnswerHandler);
      return;
    } else if (xml instanceof XmlContents
         && piAnswerHandler != null) {
      _generateXml((XmlContents)xml, stringBuilder, piAnswerHandler);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(xml, stringBuilder, piAnswerHandler).toString());
    }
  }
}
