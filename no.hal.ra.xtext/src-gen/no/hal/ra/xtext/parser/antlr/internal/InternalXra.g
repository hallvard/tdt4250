/*
 * generated by Xtext
 */
grammar InternalXra;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package no.hal.ra.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package no.hal.ra.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import no.hal.ra.xtext.services.XraGrammarAccess;

}

@parser::members {

 	private XraGrammarAccess grammarAccess;
 	
    public InternalXraParser(TokenStream input, XraGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Department";	
   	}
   	
   	@Override
   	protected XraGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDepartment
entryRuleDepartment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDepartmentRule()); }
	 iv_ruleDepartment=ruleDepartment 
	 { $current=$iv_ruleDepartment.current; } 
	 EOF 
;

// Rule Department
ruleDepartment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDepartmentAccess().getDepartmentAction_0(),
            $current);
    }
)	otherlv_1='department' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDepartmentAccess().getDepartmentKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDepartmentAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDepartmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='staff' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDepartmentAccess().getStaffKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDepartmentAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentAccess().getEmployeesPersonParserRuleCall_5_0()); 
	    }
		lv_employees_5_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentRule());
	        }
       		add(
       			$current, 
       			"employees",
        		lv_employees_5_0, 
        		"Person");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDepartmentAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_7='role' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDepartmentAccess().getRoleKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDepartmentAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentAccess().getRolesRoleParserRuleCall_9_0()); 
	    }
		lv_roles_9_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentRule());
	        }
       		add(
       			$current, 
       			"roles",
        		lv_roles_9_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDepartmentAccess().getRightCurlyBracketKeyword_10());
    }
	otherlv_11='courses' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDepartmentAccess().getCoursesKeyword_11());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDepartmentAccess().getLeftCurlyBracketKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentAccess().getCoursesCourseParserRuleCall_13_0()); 
	    }
		lv_courses_13_0=ruleCourse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentRule());
	        }
       		add(
       			$current, 
       			"courses",
        		lv_courses_13_0, 
        		"Course");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDepartmentAccess().getRightCurlyBracketKeyword_14());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentAccess().getSemestersSemesterParserRuleCall_15_0()); 
	    }
		lv_semesters_15_0=ruleSemester		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentRule());
	        }
       		add(
       			$current, 
       			"semesters",
        		lv_semesters_15_0, 
        		"Semester");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPersonAccess().getPersonAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPersonAccess().getLeftParenthesisKeyword_2_0());
    }
(	otherlv_3='user:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPersonAccess().getUserKeyword_2_1_0());
    }
(
(
		lv_userName_4_0=RULE_STRING
		{
			newLeafNode(lv_userName_4_0, grammarAccess.getPersonAccess().getUserNameSTRINGTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"userName",
        		lv_userName_4_0, 
        		"STRING");
	    }

)
))?(	otherlv_5='email:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPersonAccess().getEmailKeyword_2_2_0());
    }
(
(
		lv_email_6_0=RULE_STRING
		{
			newLeafNode(lv_email_6_0, grammarAccess.getPersonAccess().getEmailSTRINGTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"email",
        		lv_email_6_0, 
        		"STRING");
	    }

)
))?(	otherlv_7='face:' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPersonAccess().getFaceKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getFaceUrlURIParserRuleCall_2_3_1_0()); 
	    }
		lv_faceUrl_8_0=ruleURI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"faceUrl",
        		lv_faceUrl_8_0, 
        		"URI");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPersonAccess().getRightParenthesisKeyword_2_4());
    }
)?	otherlv_10='works' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPersonAccess().getWorksKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getEmploymentFactorFactorParserRuleCall_4_0()); 
	    }
		lv_employmentFactor_11_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"employmentFactor",
        		lv_employmentFactor_11_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCourse
entryRuleCourse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCourseRule()); }
	 iv_ruleCourse=ruleCourse 
	 { $current=$iv_ruleCourse.current; } 
	 EOF 
;

// Rule Course
ruleCourse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCourseAccess().getCourseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCourseAccess().getNameCourseCodeParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleCourseCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCourseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"CourseCode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_fullName_2_0=RULE_STRING
		{
			newLeafNode(lv_fullName_2_0, grammarAccess.getCourseAccess().getFullNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCourseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fullName",
        		lv_fullName_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='requires' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCourseAccess().getRequiresKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCourseRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getCourseAccess().getRequiredRolesRoleCrossReference_4_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCourseAccess().getCommaKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCourseRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getCourseAccess().getRequiredRolesRoleCrossReference_5_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleCourseCode
entryRuleCourseCode returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCourseCodeRule()); } 
	 iv_ruleCourseCode=ruleCourseCode 
	 { $current=$iv_ruleCourseCode.current.getText(); }  
	 EOF 
;

// Rule CourseCode
ruleCourseCode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='TDT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCourseCodeAccess().getTDTKeyword_0_0()); 
    }

    |
	kw='IT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCourseCodeAccess().getITKeyword_0_1()); 
    }
)    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getCourseCodeAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSemester
entryRuleSemester returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSemesterRule()); }
	 iv_ruleSemester=ruleSemester 
	 { $current=$iv_ruleSemester.current; } 
	 EOF 
;

// Rule Semester
ruleSemester returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSemesterAccess().getSemesterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSemesterAccess().getKindSemesterKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleSemesterKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSemesterRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"SemesterKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_year_2_0=RULE_INT
		{
			newLeafNode(lv_year_2_0, grammarAccess.getSemesterAccess().getYearINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSemesterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"year",
        		lv_year_2_0, 
        		"INT");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSemesterAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSemesterAccess().getCoursesCourseInstanceParserRuleCall_4_0()); 
	    }
		lv_courses_4_0=ruleCourseInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSemesterRule());
	        }
       		add(
       			$current, 
       			"courses",
        		lv_courses_4_0, 
        		"CourseInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSemesterAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleURI
entryRuleURI returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getURIRule()); } 
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current.getText(); }  
	 EOF 
;

// Rule URI
ruleURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getURIAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFactor
entryRuleFactor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); } 
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current.getText(); }  
	 EOF 
;

// Rule Factor
ruleFactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getFactorAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getFactorAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;







// Entry rule entryRuleCourseInstance
entryRuleCourseInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCourseInstanceRule()); }
	 iv_ruleCourseInstance=ruleCourseInstance 
	 { $current=$iv_ruleCourseInstance.current; } 
	 EOF 
;

// Rule CourseInstance
ruleCourseInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCourseInstanceAccess().getCourseInstanceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCourseInstanceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCourseInstanceAccess().getCourseCourseCrossReference_1_0()); 
	    }
		ruleCourseCode		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCourseInstanceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCourseInstanceAccess().getAllocationsCourseAllocationParserRuleCall_3_0()); 
	    }
		lv_allocations_3_0=ruleCourseAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCourseInstanceRule());
	        }
       		add(
       			$current, 
       			"allocations",
        		lv_allocations_3_0, 
        		"CourseAllocation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCourseInstanceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCourseAllocation
entryRuleCourseAllocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCourseAllocationRule()); }
	 iv_ruleCourseAllocation=ruleCourseAllocation 
	 { $current=$iv_ruleCourseAllocation.current; } 
	 EOF 
;

// Rule CourseAllocation
ruleCourseAllocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCourseAllocationAccess().getCourseAllocationAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCourseAllocationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCourseAllocationAccess().getPersonPersonCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='works' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCourseAllocationAccess().getWorksKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCourseAllocationAccess().getExplicitFactorFactorParserRuleCall_2_1_0()); 
	    }
		lv_explicitFactor_3_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCourseAllocationRule());
	        }
       		set(
       			$current, 
       			"explicitFactor",
        		lv_explicitFactor_3_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='as' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCourseAllocationAccess().getAsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCourseAllocationRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getCourseAllocationAccess().getRoleRoleCrossReference_3_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRoleAccess().getRoleAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleAccess().getFactorFactorParserRuleCall_2_0()); 
	    }
		lv_factor_2_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_2_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule SemesterKind
ruleSemesterKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='h' 
	{
        $current = grammarAccess.getSemesterKindAccess().getAUTUMNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSemesterKindAccess().getAUTUMNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='v' 
	{
        $current = grammarAccess.getSemesterKindAccess().getSPRINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSemesterKindAccess().getSPRINGEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


