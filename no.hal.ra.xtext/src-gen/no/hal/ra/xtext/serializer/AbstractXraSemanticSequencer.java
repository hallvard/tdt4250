/*
 * generated by Xtext
 */
package no.hal.ra.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import no.hal.ra.model.Course;
import no.hal.ra.model.CourseAllocation;
import no.hal.ra.model.CourseInstance;
import no.hal.ra.model.Department;
import no.hal.ra.model.ModelPackage;
import no.hal.ra.model.Person;
import no.hal.ra.model.Role;
import no.hal.ra.model.Semester;
import no.hal.ra.xtext.services.XraGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractXraSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XraGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ModelPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ModelPackage.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case ModelPackage.COURSE_ALLOCATION:
				sequence_CourseAllocation(context, (CourseAllocation) semanticObject); 
				return; 
			case ModelPackage.COURSE_INSTANCE:
				sequence_CourseInstance(context, (CourseInstance) semanticObject); 
				return; 
			case ModelPackage.DEPARTMENT:
				sequence_Department(context, (Department) semanticObject); 
				return; 
			case ModelPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case ModelPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case ModelPackage.SEMESTER:
				sequence_Semester(context, (Semester) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (person=[Person|EString] explicitFactor=Factor? role=[Role|ID]?)
	 */
	protected void sequence_CourseAllocation(EObject context, CourseAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (course=[Course|CourseCode] allocations+=CourseAllocation*)
	 */
	protected void sequence_CourseInstance(EObject context, CourseInstance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=CourseCode fullName=STRING requiredRoles+=[Role|ID] requiredRoles+=[Role|ID]*)
	 */
	protected void sequence_Course(EObject context, Course semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID employees+=Person* roles+=Role* courses+=Course* semesters+=Semester*)
	 */
	protected void sequence_Department(EObject context, Department semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString (userName=STRING? email=STRING? faceUrl=URI?)? employmentFactor=Factor)
	 */
	protected void sequence_Person(EObject context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID factor=Factor)
	 */
	protected void sequence_Role(EObject context, Role semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ROLE__NAME));
			if(transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ROLE__FACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ROLE__FACTOR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRoleAccess().getFactorFactorParserRuleCall_2_0(), semanticObject.getFactor());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (kind=SemesterKind year=INT courses+=CourseInstance*)
	 */
	protected void sequence_Semester(EObject context, Semester semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
