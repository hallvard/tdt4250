/*
 * generated by Xtext
 */
package no.hal.ra.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XraGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DepartmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Department");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDepartmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDepartmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cStaffKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEmployeesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEmployeesPersonParserRuleCall_5_0 = (RuleCall)cEmployeesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRoleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRolesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRolesRoleParserRuleCall_9_0 = (RuleCall)cRolesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cCoursesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cCoursesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cCoursesCourseParserRuleCall_13_0 = (RuleCall)cCoursesAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cSemestersAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cSemestersSemesterParserRuleCall_15_0 = (RuleCall)cSemestersAssignment_15.eContents().get(0);
		
		//Department:
		//	{Department} "department" name=ID "staff" "{" employees+=Person* "}" "role" "{" roles+=Role* "}" "courses" "{"
		//	courses+=Course* "}" semesters+=Semester*;
		@Override public ParserRule getRule() { return rule; }

		//{Department} "department" name=ID "staff" "{" employees+=Person* "}" "role" "{" roles+=Role* "}" "courses" "{"
		//courses+=Course* "}" semesters+=Semester*
		public Group getGroup() { return cGroup; }

		//{Department}
		public Action getDepartmentAction_0() { return cDepartmentAction_0; }

		//"department"
		public Keyword getDepartmentKeyword_1() { return cDepartmentKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"staff"
		public Keyword getStaffKeyword_3() { return cStaffKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//employees+=Person*
		public Assignment getEmployeesAssignment_5() { return cEmployeesAssignment_5; }

		//Person
		public RuleCall getEmployeesPersonParserRuleCall_5_0() { return cEmployeesPersonParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"role"
		public Keyword getRoleKeyword_7() { return cRoleKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//roles+=Role*
		public Assignment getRolesAssignment_9() { return cRolesAssignment_9; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_9_0() { return cRolesRoleParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//"courses"
		public Keyword getCoursesKeyword_11() { return cCoursesKeyword_11; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }

		//courses+=Course*
		public Assignment getCoursesAssignment_13() { return cCoursesAssignment_13; }

		//Course
		public RuleCall getCoursesCourseParserRuleCall_13_0() { return cCoursesCourseParserRuleCall_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }

		//semesters+=Semester*
		public Assignment getSemestersAssignment_15() { return cSemestersAssignment_15; }

		//Semester
		public RuleCall getSemestersSemesterParserRuleCall_15_0() { return cSemestersSemesterParserRuleCall_15_0; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPersonAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cUserKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cUserNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cUserNameSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cUserNameAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cEmailKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cEmailAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cEmailSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cEmailAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cFaceKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cFaceUrlAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cFaceUrlURIParserRuleCall_2_3_1_0 = (RuleCall)cFaceUrlAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cWorksKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmploymentFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmploymentFactorFactorParserRuleCall_4_0 = (RuleCall)cEmploymentFactorAssignment_4.eContents().get(0);
		
		//Person:
		//	{Person} name=EString ("(" ("user:" userName=STRING)? ("email:" email=STRING)? ("face:" faceUrl=URI)? ")")? "works"
		//	employmentFactor=Factor;
		@Override public ParserRule getRule() { return rule; }

		//{Person} name=EString ("(" ("user:" userName=STRING)? ("email:" email=STRING)? ("face:" faceUrl=URI)? ")")? "works"
		//employmentFactor=Factor
		public Group getGroup() { return cGroup; }

		//{Person}
		public Action getPersonAction_0() { return cPersonAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("(" ("user:" userName=STRING)? ("email:" email=STRING)? ("face:" faceUrl=URI)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//("user:" userName=STRING)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"user:"
		public Keyword getUserKeyword_2_1_0() { return cUserKeyword_2_1_0; }

		//userName=STRING
		public Assignment getUserNameAssignment_2_1_1() { return cUserNameAssignment_2_1_1; }

		//STRING
		public RuleCall getUserNameSTRINGTerminalRuleCall_2_1_1_0() { return cUserNameSTRINGTerminalRuleCall_2_1_1_0; }

		//("email:" email=STRING)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"email:"
		public Keyword getEmailKeyword_2_2_0() { return cEmailKeyword_2_2_0; }

		//email=STRING
		public Assignment getEmailAssignment_2_2_1() { return cEmailAssignment_2_2_1; }

		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_2_2_1_0() { return cEmailSTRINGTerminalRuleCall_2_2_1_0; }

		//("face:" faceUrl=URI)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"face:"
		public Keyword getFaceKeyword_2_3_0() { return cFaceKeyword_2_3_0; }

		//faceUrl=URI
		public Assignment getFaceUrlAssignment_2_3_1() { return cFaceUrlAssignment_2_3_1; }

		//URI
		public RuleCall getFaceUrlURIParserRuleCall_2_3_1_0() { return cFaceUrlURIParserRuleCall_2_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//"works"
		public Keyword getWorksKeyword_3() { return cWorksKeyword_3; }

		//employmentFactor=Factor
		public Assignment getEmploymentFactorAssignment_4() { return cEmploymentFactorAssignment_4; }

		//Factor
		public RuleCall getEmploymentFactorFactorParserRuleCall_4_0() { return cEmploymentFactorFactorParserRuleCall_4_0; }
	}

	public class CourseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Course");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCourseCodeParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFullNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFullNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFullNameAssignment_2.eContents().get(0);
		private final Keyword cRequiresKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequiredRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRequiredRolesRoleCrossReference_4_0 = (CrossReference)cRequiredRolesAssignment_4.eContents().get(0);
		private final RuleCall cRequiredRolesRoleIDTerminalRuleCall_4_0_1 = (RuleCall)cRequiredRolesRoleCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRequiredRolesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRequiredRolesRoleCrossReference_5_1_0 = (CrossReference)cRequiredRolesAssignment_5_1.eContents().get(0);
		private final RuleCall cRequiredRolesRoleIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRequiredRolesRoleCrossReference_5_1_0.eContents().get(1);
		
		//Course:
		//	{Course} name=CourseCode fullName=STRING "requires" requiredRoles+=[Role] ("," requiredRoles+=[Role])*;
		@Override public ParserRule getRule() { return rule; }

		//{Course} name=CourseCode fullName=STRING "requires" requiredRoles+=[Role] ("," requiredRoles+=[Role])*
		public Group getGroup() { return cGroup; }

		//{Course}
		public Action getCourseAction_0() { return cCourseAction_0; }

		//name=CourseCode
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//CourseCode
		public RuleCall getNameCourseCodeParserRuleCall_1_0() { return cNameCourseCodeParserRuleCall_1_0; }

		//fullName=STRING
		public Assignment getFullNameAssignment_2() { return cFullNameAssignment_2; }

		//STRING
		public RuleCall getFullNameSTRINGTerminalRuleCall_2_0() { return cFullNameSTRINGTerminalRuleCall_2_0; }

		//"requires"
		public Keyword getRequiresKeyword_3() { return cRequiresKeyword_3; }

		//requiredRoles+=[Role]
		public Assignment getRequiredRolesAssignment_4() { return cRequiredRolesAssignment_4; }

		//[Role]
		public CrossReference getRequiredRolesRoleCrossReference_4_0() { return cRequiredRolesRoleCrossReference_4_0; }

		//ID
		public RuleCall getRequiredRolesRoleIDTerminalRuleCall_4_0_1() { return cRequiredRolesRoleIDTerminalRuleCall_4_0_1; }

		//("," requiredRoles+=[Role])*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//requiredRoles+=[Role]
		public Assignment getRequiredRolesAssignment_5_1() { return cRequiredRolesAssignment_5_1; }

		//[Role]
		public CrossReference getRequiredRolesRoleCrossReference_5_1_0() { return cRequiredRolesRoleCrossReference_5_1_0; }

		//ID
		public RuleCall getRequiredRolesRoleIDTerminalRuleCall_5_1_0_1() { return cRequiredRolesRoleIDTerminalRuleCall_5_1_0_1; }
	}

	public class CourseCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CourseCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTDTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cITKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CourseCode:
		//	("TDT" | "IT") INT;
		@Override public ParserRule getRule() { return rule; }

		//("TDT" | "IT") INT
		public Group getGroup() { return cGroup; }

		//"TDT" | "IT"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"TDT"
		public Keyword getTDTKeyword_0_0() { return cTDTKeyword_0_0; }

		//"IT"
		public Keyword getITKeyword_0_1() { return cITKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SemesterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Semester");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemesterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindSemesterKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cYearAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYearINTTerminalRuleCall_2_0 = (RuleCall)cYearAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoursesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCoursesCourseInstanceParserRuleCall_4_0 = (RuleCall)cCoursesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Semester:
		//	{Semester} kind=SemesterKind year=INT "{" courses+=CourseInstance* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Semester} kind=SemesterKind year=INT "{" courses+=CourseInstance* "}"
		public Group getGroup() { return cGroup; }

		//{Semester}
		public Action getSemesterAction_0() { return cSemesterAction_0; }

		//kind=SemesterKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }

		//SemesterKind
		public RuleCall getKindSemesterKindEnumRuleCall_1_0() { return cKindSemesterKindEnumRuleCall_1_0; }

		//year=INT
		public Assignment getYearAssignment_2() { return cYearAssignment_2; }

		//INT
		public RuleCall getYearINTTerminalRuleCall_2_0() { return cYearINTTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//courses+=CourseInstance*
		public Assignment getCoursesAssignment_4() { return cCoursesAssignment_4; }

		//CourseInstance
		public RuleCall getCoursesCourseInstanceParserRuleCall_4_0() { return cCoursesCourseInstanceParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class URIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URI");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URI:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Factor:
		//	INT ("." INT)?;
		@Override public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class CourseInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CourseInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourseInstanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCourseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCourseCourseCrossReference_1_0 = (CrossReference)cCourseAssignment_1.eContents().get(0);
		private final RuleCall cCourseCourseCourseCodeParserRuleCall_1_0_1 = (RuleCall)cCourseCourseCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllocationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllocationsCourseAllocationParserRuleCall_3_0 = (RuleCall)cAllocationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CourseInstance:
		//	{CourseInstance} course=[Course|CourseCode] "{" allocations+=CourseAllocation* "}";
		@Override public ParserRule getRule() { return rule; }

		//{CourseInstance} course=[Course|CourseCode] "{" allocations+=CourseAllocation* "}"
		public Group getGroup() { return cGroup; }

		//{CourseInstance}
		public Action getCourseInstanceAction_0() { return cCourseInstanceAction_0; }

		//course=[Course|CourseCode]
		public Assignment getCourseAssignment_1() { return cCourseAssignment_1; }

		//[Course|CourseCode]
		public CrossReference getCourseCourseCrossReference_1_0() { return cCourseCourseCrossReference_1_0; }

		//CourseCode
		public RuleCall getCourseCourseCourseCodeParserRuleCall_1_0_1() { return cCourseCourseCourseCodeParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//allocations+=CourseAllocation*
		public Assignment getAllocationsAssignment_3() { return cAllocationsAssignment_3; }

		//CourseAllocation
		public RuleCall getAllocationsCourseAllocationParserRuleCall_3_0() { return cAllocationsCourseAllocationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CourseAllocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CourseAllocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourseAllocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonPersonCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonPersonEStringParserRuleCall_1_0_1 = (RuleCall)cPersonPersonCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWorksKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExplicitFactorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExplicitFactorFactorParserRuleCall_2_1_0 = (RuleCall)cExplicitFactorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRoleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_3_1_0 = (CrossReference)cRoleAssignment_3_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRoleRoleCrossReference_3_1_0.eContents().get(1);
		
		//CourseAllocation:
		//	{CourseAllocation} person=[Person|EString] ("works" explicitFactor=Factor)? ("as" role=[Role])?;
		@Override public ParserRule getRule() { return rule; }

		//{CourseAllocation} person=[Person|EString] ("works" explicitFactor=Factor)? ("as" role=[Role])?
		public Group getGroup() { return cGroup; }

		//{CourseAllocation}
		public Action getCourseAllocationAction_0() { return cCourseAllocationAction_0; }

		//person=[Person|EString]
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }

		//[Person|EString]
		public CrossReference getPersonPersonCrossReference_1_0() { return cPersonPersonCrossReference_1_0; }

		//EString
		public RuleCall getPersonPersonEStringParserRuleCall_1_0_1() { return cPersonPersonEStringParserRuleCall_1_0_1; }

		//("works" explicitFactor=Factor)?
		public Group getGroup_2() { return cGroup_2; }

		//"works"
		public Keyword getWorksKeyword_2_0() { return cWorksKeyword_2_0; }

		//explicitFactor=Factor
		public Assignment getExplicitFactorAssignment_2_1() { return cExplicitFactorAssignment_2_1; }

		//Factor
		public RuleCall getExplicitFactorFactorParserRuleCall_2_1_0() { return cExplicitFactorFactorParserRuleCall_2_1_0; }

		//("as" role=[Role])?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//role=[Role]
		public Assignment getRoleAssignment_3_1() { return cRoleAssignment_3_1; }

		//[Role]
		public CrossReference getRoleRoleCrossReference_3_1_0() { return cRoleRoleCrossReference_3_1_0; }

		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_3_1_0_1() { return cRoleRoleIDTerminalRuleCall_3_1_0_1; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFactorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFactorFactorParserRuleCall_2_0 = (RuleCall)cFactorAssignment_2.eContents().get(0);
		
		//Role:
		//	{Role} name=ID factor=Factor;
		@Override public ParserRule getRule() { return rule; }

		//{Role} name=ID factor=Factor
		public Group getGroup() { return cGroup; }

		//{Role}
		public Action getRoleAction_0() { return cRoleAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//factor=Factor
		public Assignment getFactorAssignment_2() { return cFactorAssignment_2; }

		//Factor
		public RuleCall getFactorFactorParserRuleCall_2_0() { return cFactorFactorParserRuleCall_2_0; }
	}
	
	
	public class SemesterKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SemesterKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAUTUMNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAUTUMNHKeyword_0_0 = (Keyword)cAUTUMNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSPRINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSPRINGVKeyword_1_0 = (Keyword)cSPRINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SemesterKind:
		//	AUTUMN="h" | SPRING="v";
		public EnumRule getRule() { return rule; }

		//AUTUMN="h" | SPRING="v"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AUTUMN="h"
		public EnumLiteralDeclaration getAUTUMNEnumLiteralDeclaration_0() { return cAUTUMNEnumLiteralDeclaration_0; }

		//"h"
		public Keyword getAUTUMNHKeyword_0_0() { return cAUTUMNHKeyword_0_0; }

		//SPRING="v"
		public EnumLiteralDeclaration getSPRINGEnumLiteralDeclaration_1() { return cSPRINGEnumLiteralDeclaration_1; }

		//"v"
		public Keyword getSPRINGVKeyword_1_0() { return cSPRINGVKeyword_1_0; }
	}
	
	private final DepartmentElements pDepartment;
	private final PersonElements pPerson;
	private final CourseElements pCourse;
	private final CourseCodeElements pCourseCode;
	private final SemesterElements pSemester;
	private final EStringElements pEString;
	private final URIElements pURI;
	private final FactorElements pFactor;
	private final EIntElements pEInt;
	private final SemesterKindElements unknownRuleSemesterKind;
	private final CourseInstanceElements pCourseInstance;
	private final CourseAllocationElements pCourseAllocation;
	private final RoleElements pRole;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XraGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDepartment = new DepartmentElements();
		this.pPerson = new PersonElements();
		this.pCourse = new CourseElements();
		this.pCourseCode = new CourseCodeElements();
		this.pSemester = new SemesterElements();
		this.pEString = new EStringElements();
		this.pURI = new URIElements();
		this.pFactor = new FactorElements();
		this.pEInt = new EIntElements();
		this.unknownRuleSemesterKind = new SemesterKindElements();
		this.pCourseInstance = new CourseInstanceElements();
		this.pCourseAllocation = new CourseAllocationElements();
		this.pRole = new RoleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hal.ra.xtext.Xra".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Department:
	//	{Department} "department" name=ID "staff" "{" employees+=Person* "}" "role" "{" roles+=Role* "}" "courses" "{"
	//	courses+=Course* "}" semesters+=Semester*;
	public DepartmentElements getDepartmentAccess() {
		return pDepartment;
	}
	
	public ParserRule getDepartmentRule() {
		return getDepartmentAccess().getRule();
	}

	//Person:
	//	{Person} name=EString ("(" ("user:" userName=STRING)? ("email:" email=STRING)? ("face:" faceUrl=URI)? ")")? "works"
	//	employmentFactor=Factor;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//Course:
	//	{Course} name=CourseCode fullName=STRING "requires" requiredRoles+=[Role] ("," requiredRoles+=[Role])*;
	public CourseElements getCourseAccess() {
		return pCourse;
	}
	
	public ParserRule getCourseRule() {
		return getCourseAccess().getRule();
	}

	//CourseCode:
	//	("TDT" | "IT") INT;
	public CourseCodeElements getCourseCodeAccess() {
		return pCourseCode;
	}
	
	public ParserRule getCourseCodeRule() {
		return getCourseCodeAccess().getRule();
	}

	//Semester:
	//	{Semester} kind=SemesterKind year=INT "{" courses+=CourseInstance* "}";
	public SemesterElements getSemesterAccess() {
		return pSemester;
	}
	
	public ParserRule getSemesterRule() {
		return getSemesterAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//URI:
	//	STRING;
	public URIElements getURIAccess() {
		return pURI;
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//Factor:
	//	INT ("." INT)?;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//enum SemesterKind:
	//	AUTUMN="h" | SPRING="v";
	public SemesterKindElements getSemesterKindAccess() {
		return unknownRuleSemesterKind;
	}
	
	public EnumRule getSemesterKindRule() {
		return getSemesterKindAccess().getRule();
	}

	//CourseInstance:
	//	{CourseInstance} course=[Course|CourseCode] "{" allocations+=CourseAllocation* "}";
	public CourseInstanceElements getCourseInstanceAccess() {
		return pCourseInstance;
	}
	
	public ParserRule getCourseInstanceRule() {
		return getCourseInstanceAccess().getRule();
	}

	//CourseAllocation:
	//	{CourseAllocation} person=[Person|EString] ("works" explicitFactor=Factor)? ("as" role=[Role])?;
	public CourseAllocationElements getCourseAllocationAccess() {
		return pCourseAllocation;
	}
	
	public ParserRule getCourseAllocationRule() {
		return getCourseAllocationAccess().getRule();
	}

	//Role:
	//	{Role} name=ID factor=Factor;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
