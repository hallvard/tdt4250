/**
 */
package no.hal.quiz.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import no.hal.quiz.util.QuizAdapterFactory;
import no.hal.quiz.views.adapters.ProposalUIAdapter;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QuizItemProviderAdapterFactory extends QuizAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public QuizItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		// added
		supportedTypes.add(ProposalUIAdapter.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.Quiz} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuizItemProvider quizItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.Quiz}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuizAdapter() {
		if (quizItemProvider == null) {
			quizItemProvider = new QuizItemProvider(this);
		}

		return quizItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.QuizProposals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuizProposalsItemProvider quizProposalsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.QuizProposals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuizProposalsAdapter() {
		if (quizProposalsItemProvider == null) {
			quizProposalsItemProvider = new QuizProposalsItemProvider(this);
		}

		return quizProposalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.QuizPartProposals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuizPartProposalsItemProvider quizPartProposalsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.QuizPartProposals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuizPartProposalsAdapter() {
		if (quizPartProposalsItemProvider == null) {
			quizPartProposalsItemProvider = new QuizPartProposalsItemProvider(this);
		}

		return quizPartProposalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.QuizPartRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuizPartRefItemProvider quizPartRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.QuizPartRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuizPartRefAdapter() {
		if (quizPartRefItemProvider == null) {
			quizPartRefItemProvider = new QuizPartRefItemProvider(this);
		}

		return quizPartRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.QuizPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuizPartItemProvider quizPartItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.QuizPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuizPartAdapter() {
		if (quizPartItemProvider == null) {
			quizPartItemProvider = new QuizPartItemProvider(this);
		}

		return quizPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.QARef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QARefItemProvider qaRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.QARef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQARefAdapter() {
		if (qaRefItemProvider == null) {
			qaRefItemProvider = new QARefItemProvider(this);
		}

		return qaRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.QA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QAItemProvider qaItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.QA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQAAdapter() {
		if (qaItemProvider == null) {
			qaItemProvider = new QAItemProvider(this);
		}

		return qaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.StringQuestion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringQuestionItemProvider stringQuestionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.StringQuestion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringQuestionAdapter() {
		if (stringQuestionItemProvider == null) {
			stringQuestionItemProvider = new StringQuestionItemProvider(this);
		}

		return stringQuestionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.StyledStringQuestion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StyledStringQuestionItemProvider styledStringQuestionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.StyledStringQuestion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStyledStringQuestionAdapter() {
		if (styledStringQuestionItemProvider == null) {
			styledStringQuestionItemProvider = new StyledStringQuestionItemProvider(this);
		}

		return styledStringQuestionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.StyledString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StyledStringItemProvider styledStringItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.StyledString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStyledStringAdapter() {
		if (styledStringItemProvider == null) {
			styledStringItemProvider = new StyledStringItemProvider(this);
		}

		return styledStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.CharStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharStyleItemProvider charStyleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.CharStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharStyleAdapter() {
		if (charStyleItemProvider == null) {
			charStyleItemProvider = new CharStyleItemProvider(this);
		}

		return charStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlQuestion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlQuestionItemProvider xmlQuestionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlQuestion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlQuestionAdapter() {
		if (xmlQuestionItemProvider == null) {
			xmlQuestionItemProvider = new XmlQuestionItemProvider(this);
		}

		return xmlQuestionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.Proposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProposalItemProvider proposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.Proposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProposalAdapter() {
		if (proposalItemProvider == null) {
			proposalItemProvider = new ProposalItemProvider(this);
		}

		return proposalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.SimpleProposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleProposalItemProvider simpleProposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.SimpleProposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleProposalAdapter() {
		if (simpleProposalItemProvider == null) {
			simpleProposalItemProvider = new SimpleProposalItemProvider(this);
		}

		return simpleProposalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.StringAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringAnswerItemProvider stringAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.StringAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringAnswerAdapter() {
		if (stringAnswerItemProvider == null) {
			stringAnswerItemProvider = new StringAnswerItemProvider(this);
		}

		return stringAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.NumberAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberAnswerItemProvider numberAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.NumberAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberAnswerAdapter() {
		if (numberAnswerItemProvider == null) {
			numberAnswerItemProvider = new NumberAnswerItemProvider(this);
		}

		return numberAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.NumberRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberRangeItemProvider numberRangeItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.NumberRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberRangeAdapter() {
		if (numberRangeItemProvider == null) {
			numberRangeItemProvider = new NumberRangeItemProvider(this);
		}

		return numberRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.BooleanAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanAnswerItemProvider booleanAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.BooleanAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanAnswerAdapter() {
		if (booleanAnswerItemProvider == null) {
			booleanAnswerItemProvider = new BooleanAnswerItemProvider(this);
		}

		return booleanAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlAnswerItemProvider xmlAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlAnswerAdapter() {
		if (xmlAnswerItemProvider == null) {
			xmlAnswerItemProvider = new XmlAnswerItemProvider(this);
		}

		return xmlAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.OptionsAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionsAnswerItemProvider optionsAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.OptionsAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionsAnswerAdapter() {
		if (optionsAnswerItemProvider == null) {
			optionsAnswerItemProvider = new OptionsAnswerItemProvider(this);
		}

		return optionsAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.OptionsProposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionsProposalItemProvider optionsProposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.OptionsProposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionsProposalAdapter() {
		if (optionsProposalItemProvider == null) {
			optionsProposalItemProvider = new OptionsProposalItemProvider(this);
		}

		return optionsProposalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.Option} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.Option}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OptionItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.SingleOptionsAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleOptionsAnswerItemProvider singleOptionsAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.SingleOptionsAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleOptionsAnswerAdapter() {
		if (singleOptionsAnswerItemProvider == null) {
			singleOptionsAnswerItemProvider = new SingleOptionsAnswerItemProvider(this);
		}

		return singleOptionsAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.ManyOptionsAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManyOptionsAnswerItemProvider manyOptionsAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.ManyOptionsAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManyOptionsAnswerAdapter() {
		if (manyOptionsAnswerItemProvider == null) {
			manyOptionsAnswerItemProvider = new ManyOptionsAnswerItemProvider(this);
		}

		return manyOptionsAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.Xml} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlItemProvider xmlItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.Xml}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlAdapter() {
		if (xmlItemProvider == null) {
			xmlItemProvider = new XmlItemProvider(this);
		}

		return xmlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlContents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlContentsItemProvider xmlContentsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlContents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlContentsAdapter() {
		if (xmlContentsItemProvider == null) {
			xmlContentsItemProvider = new XmlContentsItemProvider(this);
		}

		return xmlContentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlPIAnswerElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlPIAnswerElementItemProvider xmlPIAnswerElementItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlPIAnswerElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlPIAnswerElementAdapter() {
		if (xmlPIAnswerElementItemProvider == null) {
			xmlPIAnswerElementItemProvider = new XmlPIAnswerElementItemProvider(this);
		}

		return xmlPIAnswerElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlTagElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlTagElementItemProvider xmlTagElementItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlTagElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlTagElementAdapter() {
		if (xmlTagElementItemProvider == null) {
			xmlTagElementItemProvider = new XmlTagElementItemProvider(this);
		}

		return xmlTagElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlTagItemProvider xmlTagItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlTagAdapter() {
		if (xmlTagItemProvider == null) {
			xmlTagItemProvider = new XmlTagItemProvider(this);
		}

		return xmlTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.XmlAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlAttributeItemProvider xmlAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.XmlAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlAttributeAdapter() {
		if (xmlAttributeItemProvider == null) {
			xmlAttributeItemProvider = new XmlAttributeItemProvider(this);
		}

		return xmlAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.TaskAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskAnswerItemProvider taskAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.TaskAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAnswerAdapter() {
		if (taskAnswerItemProvider == null) {
			taskAnswerItemProvider = new TaskAnswerItemProvider(this);
		}

		return taskAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.quiz.TaskProposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskProposalItemProvider taskProposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.quiz.TaskProposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskProposalAdapter() {
		if (taskProposalItemProvider == null) {
			taskProposalItemProvider = new TaskProposalItemProvider(this);
		}

		return taskProposalItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (quizItemProvider != null) quizItemProvider.dispose();
		if (quizProposalsItemProvider != null) quizProposalsItemProvider.dispose();
		if (quizPartProposalsItemProvider != null) quizPartProposalsItemProvider.dispose();
		if (quizPartRefItemProvider != null) quizPartRefItemProvider.dispose();
		if (quizPartItemProvider != null) quizPartItemProvider.dispose();
		if (qaRefItemProvider != null) qaRefItemProvider.dispose();
		if (qaItemProvider != null) qaItemProvider.dispose();
		if (stringQuestionItemProvider != null) stringQuestionItemProvider.dispose();
		if (styledStringQuestionItemProvider != null) styledStringQuestionItemProvider.dispose();
		if (styledStringItemProvider != null) styledStringItemProvider.dispose();
		if (charStyleItemProvider != null) charStyleItemProvider.dispose();
		if (xmlQuestionItemProvider != null) xmlQuestionItemProvider.dispose();
		if (proposalItemProvider != null) proposalItemProvider.dispose();
		if (simpleProposalItemProvider != null) simpleProposalItemProvider.dispose();
		if (stringAnswerItemProvider != null) stringAnswerItemProvider.dispose();
		if (numberAnswerItemProvider != null) numberAnswerItemProvider.dispose();
		if (numberRangeItemProvider != null) numberRangeItemProvider.dispose();
		if (booleanAnswerItemProvider != null) booleanAnswerItemProvider.dispose();
		if (xmlAnswerItemProvider != null) xmlAnswerItemProvider.dispose();
		if (optionsAnswerItemProvider != null) optionsAnswerItemProvider.dispose();
		if (optionsProposalItemProvider != null) optionsProposalItemProvider.dispose();
		if (optionItemProvider != null) optionItemProvider.dispose();
		if (singleOptionsAnswerItemProvider != null) singleOptionsAnswerItemProvider.dispose();
		if (manyOptionsAnswerItemProvider != null) manyOptionsAnswerItemProvider.dispose();
		if (xmlItemProvider != null) xmlItemProvider.dispose();
		if (xmlContentsItemProvider != null) xmlContentsItemProvider.dispose();
		if (xmlPIAnswerElementItemProvider != null) xmlPIAnswerElementItemProvider.dispose();
		if (xmlTagElementItemProvider != null) xmlTagElementItemProvider.dispose();
		if (xmlTagItemProvider != null) xmlTagItemProvider.dispose();
		if (xmlAttributeItemProvider != null) xmlAttributeItemProvider.dispose();
		if (taskAnswerItemProvider != null) taskAnswerItemProvider.dispose();
		if (taskProposalItemProvider != null) taskProposalItemProvider.dispose();
	}

}
