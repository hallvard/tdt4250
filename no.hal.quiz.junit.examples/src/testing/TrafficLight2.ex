<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="TrafficLight and TrafficLightController">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the TrafficLightControllerTest class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="testing.TrafficLightControllerTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the TrafficLightController class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="testing.TrafficLightController"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the TrafficLightControllerTest."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="testing.TrafficLightControllerTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456785613478" sourceCode="package testing;&#xA;&#xA;import junit.framework.TestCase;&#xA;&#xA;public class TrafficLightControllerTest extends TestCase {&#xA;&#xA;&#x9;private ITrafficLightController trafficLightController;&#xA;&#x9;&#xA;&#x9;protected void setUp() throws Exception {&#xA;&#x9;&#x9;trafficLightController = new TrafficLightController();&#xA;&#x9;}&#xA;&#xA;&#x9;public void testTrafficLightController() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state0Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void testSequence1() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;// tick() doesn't change the state&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state2Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state2Test();&#xA;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state1Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state2Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;yellow&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;red&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state3Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="72"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456786602146" sourceCode="package testing;&#xA;&#xA;import junit.framework.TestCase;&#xA;&#xA;public class TrafficLightControllerTest extends TestCase {&#xA;&#xA;&#x9;private ITrafficLightController trafficLightController;&#xA;&#x9;&#xA;&#x9;protected void setUp() throws Exception {&#xA;&#x9;&#x9;trafficLightController = new TrafficLightController();&#xA;&#x9;}&#xA;&#xA;&#x9;public void testTrafficLightController() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state0Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void testSequence1() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;// tick() doesn't change the state&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state2Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state2Test();&#xA;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state1Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state2Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;yellow&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;red&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state3Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="72"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456786968354" sourceCode="package testing;&#xA;&#xA;import junit.framework.TestCase;&#xA;&#xA;public class TrafficLightControllerTest extends TestCase {&#xA;&#xA;&#x9;private ITrafficLightController trafficLightController;&#xA;&#x9;&#xA;&#x9;protected void setUp() throws Exception {&#xA;&#x9;&#x9;trafficLightController = new TrafficLightController();&#xA;&#x9;}&#xA;&#xA;&#x9;public void testTrafficLightController() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state0Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void testSequence1() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;// tick() doesn't change the state&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state2Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state2Test();&#xA;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state1Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state2Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;yellow&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;red&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state3Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="72"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456787062647" sourceCode="package testing;&#xA;&#xA;import junit.framework.TestCase;&#xA;&#xA;public class TrafficLightControllerTest extends TestCase {&#xA;&#xA;&#x9;private ITrafficLightController trafficLightController;&#xA;&#x9;&#xA;&#x9;protected void setUp() throws Exception {&#xA;&#x9;&#x9;trafficLightController = new TrafficLightController();&#xA;&#x9;}&#xA;&#xA;&#x9;public void testTrafficLightController() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state0Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void testSequence1() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;// tick() doesn't change the state&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state2Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state2Test();&#xA;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state1Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state2Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;yellow&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;red&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state3Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="72"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456787984814" sourceCode="package testing;&#xA;&#xA;import junit.framework.TestCase;&#xA;&#xA;public class TrafficLightControllerTest extends TestCase {&#xA;&#xA;&#x9;private ITrafficLightController trafficLightController;&#xA;&#x9;&#xA;&#x9;protected void setUp() throws Exception {&#xA;&#x9;&#x9;trafficLightController = new TrafficLightController();&#xA;&#x9;}&#xA;&#xA;&#x9;public void testTrafficLightController() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state0Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#xA;&#x9;public void testSequence1() {&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;// tick() doesn't change the state&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state1Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state2Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state2Test();&#xA;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;trafficLightController.pedButton();&#xA;&#x9;&#x9;// pedButton() doesn't change the state&#xA;&#x9;&#x9;state3Test();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;trafficLightController.tick();&#xA;&#x9;&#x9;state0Test();&#xA;&#x9;}&#xA;&#xA;&#x9;private void state1Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;red&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state2Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;yellow&quot;, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;red&quot;));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void state3Test() {&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(true, &quot;red&quot;, &quot;yellow&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isCarLight(false, &quot;green&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(true, &quot;red&quot;));&#xA;&#x9;&#x9;assertTrue(trafficLightController.isPedLight(false, &quot;green&quot;));&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="72"/>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780399019" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" sizeMeasure="29"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780442356" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" sizeMeasure="31" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780847039" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" sizeMeasure="30" warningCount="1"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780854490" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#xA;&#x9;}&#xA;&#xA;}&#xA;" sizeMeasure="29"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780864027" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="24"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780899598" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(&quot;red&quot;, &quot;green&quot;);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="29"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456780971148" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="29"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781073280" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;private int stateNum = 0;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="31" warningCount="1"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781156900" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState0() {&#xA;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="36" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781195707" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="41" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781342891" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="57" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781355359" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="57" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781410594" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="65" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781424060" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="64" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781439335" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="64" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781617115" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="63" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781644364" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="63" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781662626" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="61" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781696994" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="60" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781699338" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;private void enterState0() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="58" warningCount="2"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781715706" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="55" warningCount="1"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781753912" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="57"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456781797035" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;if (stateNum > 0) {&#xA;&#x9;&#x9;&#x9;enterState((stateNum + 1) % 4);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="60"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456782309410" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;if (stateNum > 0) {&#xA;&#x9;&#x9;&#x9;enterState((stateNum + 1) % 4);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="60"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456784478368" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;// assumes the previous state is stateNum - 1&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;if (stateNum > 0) {&#xA;&#x9;&#x9;&#x9;enterState((stateNum + 1) % 4);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="61"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456837040285" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;// assumes the previous state is stateNum - 1&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;if (stateNum > 0) {&#xA;&#x9;&#x9;&#x9;enterState((stateNum + 1) % 4);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;System.out.println(TrafficLightController.class);&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="65"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456928209394" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;if (stateNum > 0) {&#xA;&#x9;&#x9;&#x9;enterState((stateNum + 1) % 4);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;System.out.println(TrafficLightController.class);&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="64"/>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456928227511" sourceCode="package testing;&#xA;&#xA;public class TrafficLightController implements ITrafficLightController {&#xA;&#xA;&#x9;private TrafficLight carLights, pedLights;&#xA;&#x9;private int stateNum = 0;&#xA;&#xA;&#x9;public TrafficLightController() {&#xA;&#x9;&#x9;this.carLights = new TrafficLight(TrafficLight.RED, TrafficLight.YELLOW, TrafficLight.GREEN);&#xA;&#x9;&#x9;this.pedLights = new TrafficLight(TrafficLight.RED, TrafficLight.GREEN);&#xA;&#x9;&#x9;enterState(0);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void enterState(int stateNum) {&#xA;&#x9;&#x9;this.stateNum = stateNum;&#xA;&#x9;&#x9;// assumes the previous state is stateNum - 1&#xA;&#x9;&#x9;switch (stateNum) {&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;&#x9;this.carLights.setState(true, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;this.carLights.setState(false, TrafficLight.RED, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(true, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.setState(false, TrafficLight.GREEN);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.GREEN, TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;&#x9;this.carLights.toggleState(TrafficLight.YELLOW);&#xA;&#x9;&#x9;&#x9;this.pedLights.toggleState(TrafficLight.GREEN, TrafficLight.RED);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isCarLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return carLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean isPedLight(boolean state, String... lights) {&#xA;&#x9;&#x9;return pedLights.isState(state, lights);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void tick() {&#xA;&#x9;&#x9;if (stateNum > 0) {&#xA;&#x9;&#x9;&#x9;enterState((stateNum + 1) % 4);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void pedButton() {&#xA;&#x9;&#x9;if (stateNum == 0) {&#xA;&#x9;&#x9;&#x9;enterState(1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;System.out.println(TrafficLightController.class);&#xA;&#x9;}&#xA;}&#xA;" sizeMeasure="65"/>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.2/@q" answer="/0/@parts.0/@tasks.2/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456928328191" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457560925120" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457561279782" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457562486061" completion="1.0" successCount="2"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a" performedCount="6">
        <attempts timestamp="1457560911582"/>
        <attempts timestamp="1457560921286"/>
        <attempts timestamp="1457560922954"/>
        <attempts timestamp="1457560924054"/>
        <attempts timestamp="1457561268834"/>
        <attempts timestamp="1457561272901"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a" performedCount="1">
        <attempts timestamp="1457560919204"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a"/>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
